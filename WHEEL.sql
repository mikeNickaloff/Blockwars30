PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE files (
  id INTEGER PRIMARY KEY,
  relpath TEXT UNIQUE NOT NULL,
  description TEXT
);
INSERT INTO files VALUES(33,'WHEEL.db','SQLite metadata store defined in AGENTS.md for file/function and change tracking.');
INSERT INTO files VALUES(34,'Main.qml','Top-level Window that loads the main menu, shows the PowerupEditor, and toggles the DebugScene per README''s debug workflow.');
INSERT INTO files VALUES(35,'main.cpp','Qt application entry point that registers the image resource bundle, exposes the Pool type, and loads the Blockwars30 QML module.');
INSERT INTO files VALUES(36,'engine/AbstractGameItem.qml','Reusable base item that auto-registers with a GameScene and hosts child content via a Loader.');
INSERT INTO files VALUES(37,'engine/GameContainer.qml','Placeholder Item that currently exists as a convenience hook for future container-specific logic.');
INSERT INTO files VALUES(38,'engine/GameDragAndSwapItem.qml','Specialized drag item that tracks match-3 grid positions to support swap logic layered on GameDragItem.');
INSERT INTO files VALUES(39,'engine/GameDragItem.qml','Primary draggable wrapper that synchronizes loaded content with drag gestures and reports lifecycle through signals.');
INSERT INTO files VALUES(40,'engine/GameDropItem.qml','DropArea wrapper that exposes drag enter/exit signals and can auto-center compatible GameDragItem payloads.');
INSERT INTO files VALUES(41,'engine/GameDynamicItem.qml','Convenience subclass of AbstractGameItem that enforces the presence of scene and item name metadata.');
INSERT INTO files VALUES(42,'engine/GameLayout.qml','GridLayout alias used for arranging menu components with potential future custom behavior.');
INSERT INTO files VALUES(43,'engine/GameScene.qml','Central scene coordinator that tracks named items, wires drag/drop lifecycles, and emits gameplay events.');
INSERT INTO files VALUES(44,'engine/GameSpriteSheetItem.qml','Sprite-driven dynamic item that proxies AnimatedSprite settings and emits start/end callbacks for effects.');
INSERT INTO files VALUES(45,'engine/GameStaticItem.qml','Static variant of AbstractGameItem kept for parity with dynamic items when no extra behavior is needed.');
INSERT INTO files VALUES(46,'game/DebugScene.qml','Development scene embedding draggable blocks, a drop zone, and demo timers to exercise engine behaviors.');
INSERT INTO files VALUES(47,'game/factory.js','Factory helpers for constructing UI blocks wrapped in Engine.GameDragItem instances with unique names.');
INSERT INTO files VALUES(48,'game/layouts.js','Layout utilities used by BattleGrid and other grid-based views to translate linear indexes to coordinates.');
INSERT INTO files VALUES(49,'game/MainMenuScene.qml','Main menu scene exposing navigation signals and using GameLayout to stack MenuButtons.');
INSERT INTO files VALUES(50,'game/SinglePlayerScene.qml','Placeholder GameScene reserved for single-player gameplay layout.');
INSERT INTO files VALUES(51,'game/ui/BattleGrid.qml','Runtime-instantiated battle grid that spawns draggable blocks via Factory helpers and reflows them into a grid.');
INSERT INTO files VALUES(52,'game/ui/BlockExplodeParticles.qml','Particle effect container that bursts multiple emitters to simulate a block explosion.');
INSERT INTO files VALUES(53,'game/ui/Block.qml','Visual block component that swaps between idle, launch, and explode states while coordinating drop registration.');
INSERT INTO files VALUES(54,'game/ui/GridCell.qml','Drop-enabled grid cell that tracks the assigned drag item and updates visuals based on occupancy.');
INSERT INTO files VALUES(55,'game/ui/GridColumn.qml','Column ListView template that spawns placeholder GameDragItems for prototype grid column experiments.');
INSERT INTO files VALUES(56,'game/ui/Hud.qml','HUD placeholder Item reserved for future overlays.');
INSERT INTO files VALUES(57,'game/ui/MenuButton.qml','Wrapper around Qt Quick Controls Button preconfigured for menu layout usage.');
INSERT INTO files VALUES(58,'game/ui/PowerupCard.qml','Data-driven powerup card component that renders target icons and summarized stats.');
INSERT INTO files VALUES(59,'lib/promise.js','Promise library port that mirrors JavaScript Promise semantics for QML, including combinators and timers.');
INSERT INTO files VALUES(60,'lib/Promise.qml','QtObject wrapper around the JS Promise library that exposes QML-friendly resolve/reject hooks and signals.');
INSERT INTO files VALUES(61,'lib/PromiseTimer.qml','Thin Timer wrapper used by the promise utility to schedule callbacks.');
INSERT INTO files VALUES(62,'lib/qmldir','Module manifest exposing the Promise JS library and QML wrapper under `PromiseLib`.');
INSERT INTO files VALUES(63,'pool.h','QObject-derived pool that serves deterministic random numbers and color names to QML consumers.');
INSERT INTO files VALUES(64,'pool.cpp','Implementation backing Pool that reads resource data and cycles through numeric and color outputs.');
INSERT INTO files VALUES(65,'images.qrc','Qt resource collection listing sprite and UI assets bundled with the application.');
INSERT INTO files VALUES(66,'CMakeLists.txt','CMake configuration for the Blockwars30 Qt Quick application.');
INSERT INTO files VALUES(67,'game/PowerupEditor.qml','Powerup editor scene embedding the catalog and controls for managing powerups.');
INSERT INTO files VALUES(68,'game/data/PowerupDatabase.qml','Powerup database wrapper that returns stored definitions or curated built-ins when empty.');
INSERT INTO files VALUES(69,'game/data/PowerupItem.qml','Data-only representation of a powerup configuration with computed energy requirements.');
INSERT INTO files VALUES(70,'game/ui/PowerupCatalog.qml','Scrollable catalog view that lists powerup cards from the database for selection.');
INSERT INTO files VALUES(71,'game/ui/MatchSetup.qml','Pre-match setup screen for selecting player powerup loadout.');
CREATE TABLE defs (
  id INTEGER PRIMARY KEY,
  file_id INTEGER NOT NULL,
  type TEXT NOT NULL,
  parameters TEXT,
  description TEXT, signature TEXT,
  FOREIGN KEY(file_id) REFERENCES files(id)
);
INSERT INTO defs VALUES(1,34,'member','debugScene','Hidden DebugScene instance made visible when the main menu emits `debugChosen`.',NULL);
INSERT INTO defs VALUES(2,35,'function','main(int argc, char *argv[])','Boots the QGuiApplication, registers assets/types, and starts the event loop.',NULL);
INSERT INTO defs VALUES(3,36,'function','deriveParent()','Chooses the visual parent, preferring `gameScene` or `itemParent` when available.',NULL);
INSERT INTO defs VALUES(4,36,'function','isUndefined(object)','Helper that returns true when a value is strictly `undefined`.',NULL);
INSERT INTO defs VALUES(5,36,'function','loadComponent(componentObject)','Assigns a new source component to the internal loader.',NULL);
INSERT INTO defs VALUES(6,36,'member',NULL,'Scene reference used for registration and parent derivation.',NULL);
INSERT INTO defs VALUES(7,36,'member',NULL,'Cached scene-space x coordinate for helpers.',NULL);
INSERT INTO defs VALUES(8,36,'member',NULL,'Cached scene-space y coordinate for helpers.',NULL);
INSERT INTO defs VALUES(9,36,'member',NULL,'Optional override for the loaded item''s parent Item.',NULL);
INSERT INTO defs VALUES(10,36,'member',NULL,'Stored width for layout tools and metadata syncing.',NULL);
INSERT INTO defs VALUES(11,36,'member',NULL,'Stored height for layout tools and metadata syncing.',NULL);
INSERT INTO defs VALUES(12,36,'member',NULL,'Slot for the instantiated child content.',NULL);
INSERT INTO defs VALUES(13,36,'member',NULL,'Scene registration key for this item.',NULL);
INSERT INTO defs VALUES(14,36,'member',NULL,'Alias to the Loader sourceComponent so callers can swap content.',NULL);
INSERT INTO defs VALUES(15,36,'member',NULL,'Reserved horizontal offset for delayed layout adjustments.',NULL);
INSERT INTO defs VALUES(16,36,'member',NULL,'Reserved vertical offset for delayed layout adjustments.',NULL);
INSERT INTO defs VALUES(17,38,'member',NULL,'Visual ordering hint when animating drag swaps.',NULL);
INSERT INTO defs VALUES(18,38,'member',NULL,'Flag indicating the block has been moved from its original slot.',NULL);
INSERT INTO defs VALUES(19,38,'member',NULL,'Target linear index to land on after a swap completes.',NULL);
INSERT INTO defs VALUES(20,38,'member',NULL,'Original linear index prior to a swap.',NULL);
INSERT INTO defs VALUES(21,38,'member',NULL,'Column coordinate inside the owning grid.',NULL);
INSERT INTO defs VALUES(22,38,'member',NULL,'Row coordinate inside the owning grid.',NULL);
INSERT INTO defs VALUES(23,38,'member',NULL,'Column at drag start for rollback or analytics.',NULL);
INSERT INTO defs VALUES(24,38,'member',NULL,'Row at drag start for rollback or analytics.',NULL);
INSERT INTO defs VALUES(25,38,'member',NULL,'Reference to the visual block instance bound to this drag item.',NULL);
INSERT INTO defs VALUES(26,39,'function','destroySceneItem()','Emits `entryDestroyed` so the scene can clean up when the drag item is torn down.',NULL);
INSERT INTO defs VALUES(27,39,'member',NULL,'Required scene reference for registration and drag callbacks.',NULL);
INSERT INTO defs VALUES(28,39,'member',NULL,'Required scene identifier for this drag item.',NULL);
INSERT INTO defs VALUES(29,39,'member',NULL,'Required visual/logic payload that mirrors the drag item''s geometry.',NULL);
INSERT INTO defs VALUES(30,39,'member',NULL,'Default property alias used to provide the draggable visuals.',NULL);
INSERT INTO defs VALUES(31,39,'member',NULL,'Alias exposing the wrapper Item for manual positioning.',NULL);
INSERT INTO defs VALUES(32,39,'member',NULL,'Local x coordinate recorded at the start of a drag.',NULL);
INSERT INTO defs VALUES(33,39,'member',NULL,'Local y coordinate recorded at the start of a drag.',NULL);
INSERT INTO defs VALUES(34,39,'member',NULL,'Placeholder for tracking the latest drag x coordinate.',NULL);
INSERT INTO defs VALUES(35,39,'member',NULL,'Placeholder for tracking the latest drag y coordinate.',NULL);
INSERT INTO defs VALUES(36,39,'member',NULL,'True while the pointer is actively dragging this item.',NULL);
INSERT INTO defs VALUES(37,39,'member',NULL,'Array of extra drag metadata shared with drop targets.',NULL);
INSERT INTO defs VALUES(38,39,'member',NULL,'Duration in milliseconds for the x-axis easing when repositioning.',NULL);
INSERT INTO defs VALUES(39,39,'member',NULL,'Duration in milliseconds for the y-axis easing when repositioning.',NULL);
INSERT INTO defs VALUES(40,39,'member',NULL,'Enables or disables the x-axis easing Behavior.',NULL);
INSERT INTO defs VALUES(41,39,'member',NULL,'Enables or disables the y-axis easing Behavior.',NULL);
INSERT INTO defs VALUES(42,39,'signal',NULL,'Fired when the mouse press begins to drag this item.',NULL);
INSERT INTO defs VALUES(43,39,'signal',NULL,'Fired when the pointer releases the drag item.',NULL);
INSERT INTO defs VALUES(44,39,'signal',NULL,'Fired on mouse movement with offset data relative to drag start.',NULL);
INSERT INTO defs VALUES(45,39,'signal',NULL,'Emitted prior to teardown so the owning scene can release references.',NULL);
INSERT INTO defs VALUES(46,40,'function','isGameDragItem(item)','Validates that the dragged object exposes the GameDragItem API.',NULL);
INSERT INTO defs VALUES(47,40,'function','snapItemToCenter(dragItem)','Recenters a dropped GameDragItem and mirrors coordinates back to its entry.',NULL);
INSERT INTO defs VALUES(48,40,'member',NULL,'Scene reference used for registration and callbacks.',NULL);
INSERT INTO defs VALUES(49,40,'member',NULL,'Scene identifier for the drop surface.',NULL);
INSERT INTO defs VALUES(50,40,'member',NULL,'Default property alias to populate the visible drop target.',NULL);
INSERT INTO defs VALUES(51,40,'member',NULL,'Alias exposing the wrapper Item for manual tweaks.',NULL);
INSERT INTO defs VALUES(52,40,'member',NULL,'Mirrors DropArea.containsDrag so layouts can react visually.',NULL);
INSERT INTO defs VALUES(53,40,'member',NULL,'Toggles whether dropped GameDragItem payloads are recentered automatically.',NULL);
INSERT INTO defs VALUES(54,40,'member',NULL,'Reference to the visual content bound to this drop zone.',NULL);
INSERT INTO defs VALUES(55,40,'signal',NULL,'Raised when an accepted drag hovers over the drop zone.',NULL);
INSERT INTO defs VALUES(56,40,'signal',NULL,'Raised when the hovering drag leaves without dropping.',NULL);
INSERT INTO defs VALUES(57,41,'member',NULL,'Required scene reference for dynamic items.',NULL);
INSERT INTO defs VALUES(58,41,'member',NULL,'Required scene identifier.',NULL);
INSERT INTO defs VALUES(59,42,'member',NULL,'',NULL);
INSERT INTO defs VALUES(60,43,'function','getSceneItem(itemName)','Fetches a previously registered scene item or logs an error when missing.',NULL);
INSERT INTO defs VALUES(61,43,'function','removeSceneItem(itemName)','Destroys and removes a stored scene item entry.',NULL);
INSERT INTO defs VALUES(62,43,'function','addSceneItem(itemName, itemObject)','Registers a scene item and stamps scene metadata onto it.',NULL);
INSERT INTO defs VALUES(63,43,'function','addSceneDragItem(itemName, itemObject)','Registers a drag item and hooks drag lifecycle signals for scene relays.',NULL);
INSERT INTO defs VALUES(64,43,'function','addSceneDropItem(itemName, itemObject)','Registers a drop zone and hooks enter/exit signals.',NULL);
INSERT INTO defs VALUES(65,43,'function','handleDropItemEntered(_itemName, _dragEvent)','Updates `activeDrag` when a drag enters a drop area.',NULL);
INSERT INTO defs VALUES(66,43,'function','handleDropItemExited(_itemName, _dragEvent)','Flags the active drag as exiting so later moves clear the target.',NULL);
INSERT INTO defs VALUES(67,43,'function','handleDragItemStartDrag(itemName, _x, _y)','Captures the drag source and emits `itemDragStarted`.',NULL);
INSERT INTO defs VALUES(68,43,'function','handleDragItemMoved(itemName, _x, _y, offsets)','Relays drag motion via `itemDragMoved`, resetting target when exiting.',NULL);
INSERT INTO defs VALUES(69,43,'function','handleDragItemDropped(itemName, _x, _y, _startx, _starty)','Emits `itemDroppedInDropArea` with source and target context.',NULL);
INSERT INTO defs VALUES(70,43,'function','setSceneItemProperties(itemName, propsObject)','Attempts to update cached metadata on a registered item.',NULL);
INSERT INTO defs VALUES(71,43,'member',NULL,'Optional scene width metadata for layout consumers.',NULL);
INSERT INTO defs VALUES(72,43,'member',NULL,'Optional scene height metadata for layout consumers.',NULL);
INSERT INTO defs VALUES(73,43,'member',NULL,'Reference to a parent GameScene when scenes are nested.',NULL);
INSERT INTO defs VALUES(74,43,'member',NULL,'Logical identifier for this scene instance.',NULL);
INSERT INTO defs VALUES(75,43,'member',NULL,'Dictionary mapping item names to registered objects.',NULL);
INSERT INTO defs VALUES(76,43,'member',NULL,'Struct tracking the current drag source, target, and exit state.',NULL);
INSERT INTO defs VALUES(77,43,'signal',NULL,'Notifies listeners that a drag began.',NULL);
INSERT INTO defs VALUES(78,43,'signal',NULL,'Broadcasts drag motion with offset data.',NULL);
INSERT INTO defs VALUES(79,43,'signal',NULL,'Reports successful drops to interested systems.',NULL);
INSERT INTO defs VALUES(80,44,'function','startAnimation()','Starts the internal AnimatedSprite playback.',NULL);
INSERT INTO defs VALUES(81,44,'member',NULL,'Alias to the AnimatedSprite source.',NULL);
INSERT INTO defs VALUES(82,44,'member',NULL,'Alias controlling how many frames the sprite uses.',NULL);
INSERT INTO defs VALUES(83,44,'member',NULL,'Alias specifying how many loops to play.',NULL);
INSERT INTO defs VALUES(84,44,'member',NULL,'Alias controlling per-frame duration in milliseconds.',NULL);
INSERT INTO defs VALUES(85,44,'member',NULL,'Alias assigning frame width for the sprite sheet.',NULL);
INSERT INTO defs VALUES(86,44,'member',NULL,'Alias assigning frame height for the sprite sheet.',NULL);
INSERT INTO defs VALUES(87,44,'signal',NULL,'Emitted when the animation finishes.',NULL);
INSERT INTO defs VALUES(88,44,'signal',NULL,'Emitted when the animation starts running.',NULL);
INSERT INTO defs VALUES(89,45,'member',NULL,'',NULL);
INSERT INTO defs VALUES(90,46,'function','createBlock(color)','Uses Factory.createBlock to spawn a draggable block with the requested color.',NULL);
INSERT INTO defs VALUES(91,46,'member',NULL,'Array tracking the currently instantiated draggable block items.',NULL);
INSERT INTO defs VALUES(92,46,'member',NULL,'Incrementing counter used by the timer-driven launch sequence.',NULL);
INSERT INTO defs VALUES(93,46,'signal',NULL,'',NULL);
INSERT INTO defs VALUES(94,47,'function','uid(prefix)','Generates a quasi-unique identifier using time and an incrementing sequence.',NULL);
INSERT INTO defs VALUES(95,47,'function','createBlock(blockComp, dragComp, parent, gameScene, opts)','Creates a UI.Block inside a GameDragItem, with optional spawnFromAbove/dropOffsetY support to animate a fall-in before registering to the scene.',NULL);
INSERT INTO defs VALUES(96,47,'member',NULL,'Internal counter feeding uid generation.',NULL);
INSERT INTO defs VALUES(97,48,'function','gridPos(index, o)','Returns `{x, y, row, col}` coordinates inside a configurable grid footprint.',NULL);
INSERT INTO defs VALUES(98,49,'signal',NULL,'Triggered when the Single Player button is pressed.',NULL);
INSERT INTO defs VALUES(99,49,'signal',NULL,'Triggered when the Multiplayer button is pressed.',NULL);
INSERT INTO defs VALUES(100,49,'signal',NULL,'Triggered when the Powerup Editor button is pressed.',NULL);
INSERT INTO defs VALUES(101,49,'signal',NULL,'Triggered when the Options button is pressed.',NULL);
INSERT INTO defs VALUES(102,49,'signal',NULL,'Triggered when the Debug button is pressed.',NULL);
INSERT INTO defs VALUES(103,49,'signal',NULL,'Triggered when the Exit button is pressed.',NULL);
INSERT INTO defs VALUES(105,51,'member',NULL,'Scene reference required when registering new drag items.',NULL);
INSERT INTO defs VALUES(106,51,'member',NULL,'Number of columns in the grid.',NULL);
INSERT INTO defs VALUES(107,51,'member',NULL,'Number of rows in the grid.',NULL);
INSERT INTO defs VALUES(108,51,'member',NULL,'Width of each grid cell in pixels.',NULL);
INSERT INTO defs VALUES(109,51,'member',NULL,'Height of each grid cell in pixels.',NULL);
INSERT INTO defs VALUES(110,51,'member',NULL,'Horizontal spacing between cells.',NULL);
INSERT INTO defs VALUES(111,51,'member',NULL,'Vertical spacing between cells.',NULL);
INSERT INTO defs VALUES(112,51,'member',NULL,'Horizontal offset applied to the entire grid footprint.',NULL);
INSERT INTO defs VALUES(113,51,'member',NULL,'Vertical offset applied to the entire grid footprint.',NULL);
INSERT INTO defs VALUES(114,51,'member',NULL,'Array tracking created GameDragItem instances for later reflow or cleanup.',NULL);
INSERT INTO defs VALUES(115,52,'function','burstAt(xpos, ypos)','Triggers each emitter at the given coordinate to play the explosion sequence.',NULL);
INSERT INTO defs VALUES(116,52,'member',NULL,'Exposes the internal ParticleSystem for advanced tuning.',NULL);
INSERT INTO defs VALUES(117,53,'function','blockLaunchSpriteSheet()','Produces the expected sprite sheet URL for the current block color.',NULL);
INSERT INTO defs VALUES(118,53,'member',NULL,'Logical color for sprite selection and styling.',NULL);
INSERT INTO defs VALUES(119,53,'member',NULL,'Alias to the Loader source for direct component swapping.',NULL);
INSERT INTO defs VALUES(120,53,'member',NULL,'Scene reference used for registering the internal drop item.',NULL);
INSERT INTO defs VALUES(121,53,'member',NULL,'Scene identifier shared with the drop item.',NULL);
INSERT INTO defs VALUES(122,53,'member',NULL,'High-level state driving which visual component is loaded.',NULL);
INSERT INTO defs VALUES(123,53,'member',NULL,'Component definition used when the block launches.',NULL);
INSERT INTO defs VALUES(124,53,'member',NULL,'Component definition used during idle state.',NULL);
INSERT INTO defs VALUES(125,53,'member',NULL,'Component definition used during explosion.',NULL);
INSERT INTO defs VALUES(126,53,'signal',NULL,'Emitted when the post-launch timer completes and the block should be removed.',NULL);
INSERT INTO defs VALUES(127,54,'function','hasItem()','Returns true when a drag item is currently assigned to the cell.',NULL);
INSERT INTO defs VALUES(128,54,'function','clearAssignment()','Clears the recorded drag item assignment.',NULL);
INSERT INTO defs VALUES(129,54,'function','centerItem(dragItem)','Reuses snapItemToCenter to align a drag item with the cell center.',NULL);
INSERT INTO defs VALUES(130,54,'member',NULL,'Row coordinate within the parent grid.',NULL);
INSERT INTO defs VALUES(131,54,'member',NULL,'Column coordinate within the parent grid.',NULL);
INSERT INTO defs VALUES(132,54,'member',NULL,'Back-reference to the owning BattleGrid Item.',NULL);
INSERT INTO defs VALUES(133,54,'member',NULL,'Currently assigned drag item, if any.',NULL);
INSERT INTO defs VALUES(134,54,'member',NULL,'Internal flag indicating registration with the grid.',NULL);
INSERT INTO defs VALUES(135,54,'member',NULL,'Fill color when the cell is empty.',NULL);
INSERT INTO defs VALUES(136,54,'member',NULL,'Fill color while an accepted drag hovers over the cell.',NULL);
INSERT INTO defs VALUES(137,54,'member',NULL,'Fill color when the cell holds a block.',NULL);
INSERT INTO defs VALUES(138,54,'member',NULL,'Border color used when debug borders are enabled.',NULL);
INSERT INTO defs VALUES(139,54,'member',NULL,'Toggles whether the border is drawn for debugging.',NULL);
INSERT INTO defs VALUES(140,54,'signal',NULL,'Emitted whenever `assignedItem` updates.',NULL);
INSERT INTO defs VALUES(141,55,'member',NULL,'Backing data model used to populate the column (defaults to 6 rows).',NULL);
INSERT INTO defs VALUES(142,55,'member',NULL,'Row count hint for external configuration.',NULL);
INSERT INTO defs VALUES(143,55,'member',NULL,'Optional reference to the owning grid container.',NULL);
INSERT INTO defs VALUES(144,55,'member',NULL,'Column coordinate for this ListView.',NULL);
INSERT INTO defs VALUES(145,55,'member',NULL,'Scene reference passed to delegate GameDragItems.',NULL);
INSERT INTO defs VALUES(146,57,'member',NULL,'Optional reference to the scene item that owns the button.',NULL);
INSERT INTO defs VALUES(147,57,'member',NULL,'Alias to the button text for quick assignment.',NULL);
INSERT INTO defs VALUES(148,57,'signal',NULL,'',NULL);
INSERT INTO defs VALUES(152,59,'function','clearTimeout(timerId)','Stops and destroys a previously scheduled PromiseTimer.',NULL);
INSERT INTO defs VALUES(153,59,'function','setTimeout(callback, timeout)','Schedules a PromiseTimer to invoke the callback after the timeout and returns its id.',NULL);
INSERT INTO defs VALUES(154,59,'function','QPromise(executor)','Constructor implementing a Promise-like object with fulfillment/rejection handlers.',NULL);
INSERT INTO defs VALUES(155,59,'function','instanceOfPromiseJS(object)','Detects promises created by this JS library.',NULL);
INSERT INTO defs VALUES(156,59,'function','instanceOfPromiseItem(object)','Detects QML Promise objects exposed by Promise.qml.',NULL);
INSERT INTO defs VALUES(157,59,'function','instanceOfPromise(object)','Returns true for either JS or QML promise variants.',NULL);
INSERT INTO defs VALUES(158,59,'function','_instanceOfSignal(object)','Checks whether the argument behaves like a Qt signal (has connect/disconnect).',NULL);
INSERT INTO defs VALUES(159,59,'function','QPromise.prototype.then(onFulfilled, onRejected)','Chains fulfillment and rejection handlers, returning a new QPromise.',NULL);
INSERT INTO defs VALUES(160,59,'function','QPromise.prototype.resolve(value)','Resolves the promise, assimilating other promises or signals when provided.',NULL);
INSERT INTO defs VALUES(161,59,'function','QPromise.prototype._resolveInTick(value)','Defers resolution to the next event loop tick.',NULL);
INSERT INTO defs VALUES(162,59,'function','QPromise.prototype._resolveUnsafe(value)','Resolves immediately without additional checks.',NULL);
INSERT INTO defs VALUES(163,59,'function','QPromise.prototype.reject(reason)','Rejects the promise, optionally wiring Qt signals to propagate rejection.',NULL);
INSERT INTO defs VALUES(164,59,'function','QPromise.prototype._rejectUnsafe(reason)','Rejects immediately without additional checks.',NULL);
INSERT INTO defs VALUES(165,59,'function','QPromise.prototype._emit(arr, value)','Runs stored callbacks in order, passing along the result.',NULL);
INSERT INTO defs VALUES(166,59,'function','QPromise.prototype._executeThen()','Executes queued fulfillment or rejection handlers based on state.',NULL);
INSERT INTO defs VALUES(167,59,'function','QPromise.prototype._setState(state)','Updates the state flags for fulfilled/rejected/settled tracking.',NULL);
INSERT INTO defs VALUES(168,59,'function','promise(executor)','Convenience creator returning a new pending QPromise.',NULL);
INSERT INTO defs VALUES(169,59,'function','resolve(result)','Returns a resolved QPromise with the provided result.',NULL);
INSERT INTO defs VALUES(170,59,'function','resolved(result)','Alias of resolve for compatibility.',NULL);
INSERT INTO defs VALUES(171,59,'function','reject(reason)','Returns a rejected QPromise with the provided reason.',NULL);
INSERT INTO defs VALUES(172,59,'function','rejected(reason)','Alias of reject for compatibility.',NULL);
INSERT INTO defs VALUES(173,59,'function','Combinator(promises, allSettled)','Aggregator responsible for resolving once a set of promises complete.',NULL);
INSERT INTO defs VALUES(174,59,'function','Combinator.prototype.add(promises)','Adds one or more promises to the combinator pool.',NULL);
INSERT INTO defs VALUES(175,59,'function','Combinator.prototype._addPromises(promises)','Internal helper to append an array-like collection of promises.',NULL);
INSERT INTO defs VALUES(176,59,'function','Combinator.prototype._addPromise(promise)','Adds a single promise, wrapping signals when encountered.',NULL);
INSERT INTO defs VALUES(177,59,'function','Combinator.prototype._addCheckedPromise(promise)','Hooks fulfillment/rejection callbacks to track progress.',NULL);
INSERT INTO defs VALUES(178,59,'function','Combinator.prototype._reject(reason)','Handles rejection depending on the allSettled mode.',NULL);
INSERT INTO defs VALUES(179,59,'function','Combinator.prototype._settle()','Resolves or rejects the combined promise when all inputs complete.',NULL);
INSERT INTO defs VALUES(180,59,'function','combinator(promises, allSettled)','Factory that returns a new Combinator instance.',NULL);
INSERT INTO defs VALUES(181,59,'function','all(promises)','Returns a promise fulfilled when all input promises resolve, or rejects on the first failure.',NULL);
INSERT INTO defs VALUES(182,59,'function','allSettled(promises)','Returns a promise that resolves after all inputs settle, collecting their results.',NULL);
INSERT INTO defs VALUES(183,59,'member',NULL,'Assigned to the `all` helper to mirror native Promise.all.',NULL);
INSERT INTO defs VALUES(184,59,'member',NULL,'Assigned to the `resolve` helper for parity with native Promise.resolve.',NULL);
INSERT INTO defs VALUES(185,59,'member',NULL,'Assigned to the `reject` helper for parity with native Promise.reject.',NULL);
INSERT INTO defs VALUES(186,60,'function','setTimeout(callback, interval)','Delegates to QPTimer to schedule a callback after the interval.',NULL);
INSERT INTO defs VALUES(187,60,'function','then(onFulfilled, onRejected)','Chains handlers onto the underlying JS promise.',NULL);
INSERT INTO defs VALUES(188,60,'function','resolve(value)','Resolves the internal promise, assimilating other promise-like objects when provided.',NULL);
INSERT INTO defs VALUES(189,60,'function','reject(reason)','Rejects the internal promise.',NULL);
INSERT INTO defs VALUES(190,60,'function','all(promises)','Returns a JS promise that resolves when all supplied promises fulfill.',NULL);
INSERT INTO defs VALUES(191,60,'function','allSettled(promises)','Returns a JS promise that resolves once all supplied promises settle.',NULL);
INSERT INTO defs VALUES(192,60,'function','instanceOfPromise(object)','Checks whether an object is an instance of this QML promise wrapper.',NULL);
INSERT INTO defs VALUES(193,60,'function','_instanceOfSignal(object)','Delegates to PromiseJS helper to test for Qt signals.',NULL);
INSERT INTO defs VALUES(194,60,'function','_init()','Lazily constructs the underlying JS promise and wires state signals.',NULL);
INSERT INTO defs VALUES(195,60,'member',NULL,'Default property alias enabling inline child objects.',NULL);
INSERT INTO defs VALUES(196,60,'member',NULL,'Backing list holding inline child objects.',NULL);
INSERT INTO defs VALUES(197,60,'member',NULL,'True when the promise has resolved.',NULL);
INSERT INTO defs VALUES(198,60,'member',NULL,'True when the promise has rejected.',NULL);
INSERT INTO defs VALUES(199,60,'member',NULL,'Computed flag indicating the promise has either resolved or rejected.',NULL);
INSERT INTO defs VALUES(200,60,'member',NULL,'Expression or promise that auto-resolves this object when it becomes truthy/completes.',NULL);
INSERT INTO defs VALUES(201,60,'member',NULL,'Expression or signal that auto-rejects this object when it becomes truthy.',NULL);
INSERT INTO defs VALUES(202,60,'member',NULL,'Internal reference to the JS QPromise instance.',NULL);
INSERT INTO defs VALUES(203,60,'member',NULL,'Marker used for type checking between JS and QML worlds.',NULL);
INSERT INTO defs VALUES(204,60,'signal',NULL,'Emitted when the promise resolves successfully.',NULL);
INSERT INTO defs VALUES(205,60,'signal',NULL,'Emitted when the promise rejects.',NULL);
INSERT INTO defs VALUES(206,60,'signal',NULL,'Emitted after fulfillment or rejection for generic observers.',NULL);
INSERT INTO defs VALUES(207,61,'member',NULL,'',NULL);
INSERT INTO defs VALUES(208,62,'member',NULL,'Declares the module name `PromiseLib`.',NULL);
INSERT INTO defs VALUES(209,62,'member',NULL,'Maps the JavaScript library for import.',NULL);
INSERT INTO defs VALUES(210,62,'member',NULL,'Registers the QML Promise type.',NULL);
INSERT INTO defs VALUES(211,63,'function','Pool(QObject *parent = nullptr)','Constructor that initializes the pool.',NULL);
INSERT INTO defs VALUES(212,63,'function','loadNumbers()','Loads numeric data from the embedded random_numbers resource.',NULL);
INSERT INTO defs VALUES(213,63,'function','randomNumber(int current_index = -1)','Returns the next value from the number pool, optionally seeding the index.',NULL);
INSERT INTO defs VALUES(214,63,'function','nextColor(int current_index = -1)','Maps the next pooled number to a block color string.',NULL);
INSERT INTO defs VALUES(215,63,'member',NULL,'QHash storing loaded number entries keyed by index.',NULL);
INSERT INTO defs VALUES(216,63,'member',NULL,'Tracks the current index into the number pool.',NULL);
INSERT INTO defs VALUES(217,64,'function','Pool::Pool(QObject *parent)','Invokes loadNumbers during construction.',NULL);
INSERT INTO defs VALUES(218,64,'function','Pool::loadNumbers()','Reads random_numbers.txt from resources and seeds the number hash.',NULL);
INSERT INTO defs VALUES(219,64,'function','Pool::randomNumber(int current_index)','Steps through the stored numbers and returns the next entry.',NULL);
INSERT INTO defs VALUES(220,64,'function','Pool::nextColor(int current_index)','Converts the next numeric entry into a color name.',NULL);
INSERT INTO defs VALUES(221,64,'member',NULL,'',NULL);
INSERT INTO defs VALUES(222,65,'member',NULL,'',NULL);
INSERT INTO defs VALUES(223,34,'member','powerupEditor','PowerupEditor scene instance shown when the menu requests editing.',NULL);
INSERT INTO defs VALUES(224,67,'signal','closeRequested()','Emitted when the user wants to return to the main menu from the editor.',NULL);
INSERT INTO defs VALUES(225,68,'function','open()','Returns the cached LocalStorage database connection, opening it on demand.',NULL);
INSERT INTO defs VALUES(226,68,'function','withTransaction(callback)','Runs the provided callback inside a write transaction on the LocalStorage database.',NULL);
INSERT INTO defs VALUES(227,68,'function','execute(sql, parameters)','Executes a SQL statement and returns the raw SQLite result object.',NULL);
INSERT INTO defs VALUES(228,68,'function','queryAll(sql, parameters)','Executes a read query and returns an array of row objects.',NULL);
INSERT INTO defs VALUES(229,68,'function','ensureSchema()','Placeholder hook to create required tables before use.',NULL);
INSERT INTO defs VALUES(230,68,'member','databaseName','Name used when opening the LocalStorage database.',NULL);
INSERT INTO defs VALUES(231,68,'member','databaseVersion','Semantic version string passed to LocalStorage.',NULL);
INSERT INTO defs VALUES(232,68,'member','databaseLabel','Display label for the LocalStorage database instance.',NULL);
INSERT INTO defs VALUES(233,68,'member','estimatedSize','Requested initial file size in bytes (defaults to 5 MB).',NULL);
INSERT INTO defs VALUES(234,68,'member','__connection','Cached handle to the open LocalStorage database.',NULL);
INSERT INTO defs VALUES(235,68,'signal','schemaReady()','Emitted after ensureSchema finishes running schema setup.',NULL);
INSERT INTO defs VALUES(236,69,'member','targets','Map of available powerup targets (Self or Enemy).',NULL);
INSERT INTO defs VALUES(237,69,'member','targetSpecs','Map of supported target specializations (blocks, health, in-game cards).',NULL);
INSERT INTO defs VALUES(238,69,'member','operations','Map of supported powerup operations (increase or decrease).',NULL);
INSERT INTO defs VALUES(239,69,'member','powerupUuid','Unique identifier assigned to the powerup definition.',NULL);
INSERT INTO defs VALUES(240,69,'member','powerupTarget','Target alignment this powerup affects (self or enemy).',NULL);
INSERT INTO defs VALUES(241,69,'member','powerupTargetSpec','Specific aspect of the target the powerup manipulates.',NULL);
INSERT INTO defs VALUES(242,69,'member','powerupTargetSpecData','Additional data describing the target selection such as block coordinates.',NULL);
INSERT INTO defs VALUES(243,69,'member','powerupCardHealth','Health provided when the powerup card is deployed.',NULL);
INSERT INTO defs VALUES(244,69,'member','powerupActualAmount','Magnitude by which the powerup modifies the target.',NULL);
INSERT INTO defs VALUES(245,69,'member','powerupOperation','Whether the powerup increases or decreases the target attribute.',NULL);
INSERT INTO defs VALUES(246,69,'member','powerupCardEnergyRequired','Computed energy cost derived from other powerup properties.',NULL);
INSERT INTO defs VALUES(247,69,'function','setTarget(target)','Validates and assigns the powerup target alignment.',NULL);
INSERT INTO defs VALUES(248,69,'function','setTargetSpec(spec, specData)','Configures the target specialization and optional supporting data.',NULL);
INSERT INTO defs VALUES(249,69,'function','targetBlockCount()','Returns the number of block coordinates present in targetSpecData.',NULL);
INSERT INTO defs VALUES(250,69,'function','effectiveAmount()','Normalizes the magnitude to a non-negative value used for calculations.',NULL);
INSERT INTO defs VALUES(251,69,'function','calculateEnergyRequired()','Derives the energy cost based on amount, target, and specialization.',NULL);
INSERT INTO defs VALUES(252,69,'signal','energyRecalculated(int energyRequired)','Emitted whenever the energy calculation produces a new result.',NULL);
INSERT INTO defs VALUES(253,69,'function','updateEnergyRequirement()','Recomputes the energy cost and emits a notification when it changes.',NULL);
INSERT INTO defs VALUES(254,69,'member','powerupName','Display name presented on cards and in catalog listings.',NULL);
INSERT INTO defs VALUES(255,69,'member','powerupIsCustom','Flag indicating whether the powerup originated from player-created content.',NULL);
INSERT INTO defs VALUES(256,68,'function','fetchAllPowerups()','Returns all known powerups, falling back to seeded defaults when the database is empty.',NULL);
INSERT INTO defs VALUES(257,68,'function','mapRowToPowerup(row)','Normalises raw result rows into the PowerupItem-compatible payload shape.',NULL);
INSERT INTO defs VALUES(258,68,'function','builtinPowerups()','Provides built-in powerup definitions used when no records exist in storage.',NULL);
INSERT INTO defs VALUES(259,58,'member','powerupData','Alias to the embedded PowerupItem backing this card.',NULL);
INSERT INTO defs VALUES(260,58,'member','powerupUuid','Powerup identifier mirrored from the backing PowerupItem.',NULL);
INSERT INTO defs VALUES(261,58,'member','powerupName','Display name shown on the card.',NULL);
INSERT INTO defs VALUES(262,58,'member','powerupTarget','Exposed target alignment for binding in delegates.',NULL);
INSERT INTO defs VALUES(263,58,'member','powerupTargetSpec','Exposed target specialization for binding in delegates.',NULL);
INSERT INTO defs VALUES(264,58,'member','powerupTargetSpecData','Raw target specialization data forwarded to the PowerupItem.',NULL);
INSERT INTO defs VALUES(265,58,'member','powerupCardHealth','Health granted by the powerup when played.',NULL);
INSERT INTO defs VALUES(266,58,'member','powerupActualAmount','Magnitude of the powerup effect for UI binding.',NULL);
INSERT INTO defs VALUES(267,58,'member','powerupOperation','Increase/decrease operation displayed on the card.',NULL);
INSERT INTO defs VALUES(268,58,'member','powerupIsCustom','Flag used to differentiate custom from built-in powerups.',NULL);
INSERT INTO defs VALUES(269,58,'member','powerupCardEnergyRequired','Computed energy requirement surfaced from the PowerupItem.',NULL);
INSERT INTO defs VALUES(270,58,'function','applyRecord(record)','Convenience setter that copies record fields into the backing PowerupItem.',NULL);
INSERT INTO defs VALUES(271,58,'signal','activated(string powerupUuid)','Emitted when the card is clicked within catalog views.',NULL);
INSERT INTO defs VALUES(272,70,'member','database','Reference to the PowerupDatabase instance supplying catalogue data.',NULL);
INSERT INTO defs VALUES(273,70,'member','model','Alias exposing the underlying ListModel of powerups.',NULL);
INSERT INTO defs VALUES(274,70,'function','refresh()','Reloads powerup data from the database into the GridView model.',NULL);
INSERT INTO defs VALUES(275,70,'signal','powerupChosen(var record)','Emitted when a catalog entry is activated, providing the powerup record.',NULL);
INSERT INTO defs VALUES(276,58,'function','formattedAmount()','Returns a signed string representation of the powerup amount.',NULL);
INSERT INTO defs VALUES(277,58,'function','targetedBlocksContains(row, col)','Reports whether a block coordinate is targeted by the powerup.',NULL);
INSERT INTO defs VALUES(278,58,'function','cardColor()','Derives the highlight color for card-based powerups.',NULL);
INSERT INTO defs VALUES(279,67,'member','catalog','Embedded PowerupCatalog used to browse and select powerups.',NULL);
INSERT INTO defs VALUES(280,68,'function','seedBuiltinsIfNeeded()','Populates the Powerups table with default records when it is empty.',NULL);
INSERT INTO defs VALUES(281,69,'member','powerupCardColor','Primary color applied to card visuals and block highlighting.',NULL);
INSERT INTO defs VALUES(282,69,'function','ensureSpecDataDefaults()','Normalises targetSpecData based on the current target spec.',NULL);
INSERT INTO defs VALUES(283,58,'member','powerupCardColor','Alias exposing the selected card color for styling and bindings.',NULL);
INSERT INTO defs VALUES(284,58,'function','cardColorHex()','Resolves the configured card color name to a usable hex value.',NULL);
INSERT INTO defs VALUES(285,58,'function','unselectedBlockColor()','Returns the neutral color used for non-targeted blocks.',NULL);
INSERT INTO defs VALUES(286,67,'member','editingActive','Boolean flag indicating whether a powerup is loaded for editing.',NULL);
INSERT INTO defs VALUES(287,67,'function','indexForValue(list, value)','Utility that returns the index of a value inside a model list.',NULL);
INSERT INTO defs VALUES(288,67,'function','cardColorHex(name)','Maps a card color name to the associated hex value.',NULL);
INSERT INTO defs VALUES(289,67,'function','cloneBlockArray(items)','Clones block coordinate data for safe editing.',NULL);
INSERT INTO defs VALUES(290,67,'function','isBlockSelected(row, col)','Checks whether a block coordinate is selected in the editor grid.',NULL);
INSERT INTO defs VALUES(291,67,'function','toggleBlock(row, col)','Toggles a block selection inside the editor grid.',NULL);
INSERT INTO defs VALUES(292,68,'function','generatePowerupUuid()','Generates a unique identifier for newly created powerups.',NULL);
INSERT INTO defs VALUES(293,68,'function','serializeTargetSpecDataForStorage(targetSpec, data)','Serialises target-specific data into a storable representation.',NULL);
INSERT INTO defs VALUES(294,68,'function','fetchPowerup(uuid)','Retrieves a single powerup record from the database.',NULL);
INSERT INTO defs VALUES(295,68,'function','createPowerup(initialValues)','Creates a new powerup row using optional defaults and returns it.',NULL);
INSERT INTO defs VALUES(296,68,'function','savePowerup(powerup)','Upserts a powerup record and returns the normalised result.',NULL);
INSERT INTO defs VALUES(297,68,'function','deletePowerup(uuid)','Removes a powerup from the database by UUID.',NULL);
INSERT INTO defs VALUES(298,67,'function','applyEditorRecord(record)','Loads a powerup record into the editing PowerupItem.',NULL);
INSERT INTO defs VALUES(299,67,'function','loadPowerupFromDatabase(uuid)','Fetches a powerup by UUID and applies it to the editor.',NULL);
INSERT INTO defs VALUES(300,67,'function','clearEditor()','Resets the editor to its default empty state.',NULL);
INSERT INTO defs VALUES(301,67,'function','handleNewPowerup()','Creates a new powerup entry and loads it for editing.',NULL);
INSERT INTO defs VALUES(302,67,'function','buildPayloadFromEditor()','Constructs a plain object representing the current editor state.',NULL);
INSERT INTO defs VALUES(303,67,'function','handleSavePowerup()','Persists the current editor state using the database helper.',NULL);
INSERT INTO defs VALUES(304,67,'function','handleDeletePowerup()','Deletes the currently selected powerup via the database helper.',NULL);
INSERT INTO defs VALUES(305,68,'function','normalizeLoadoutRows(rows)','Normalises joined loadout rows into slot-indexed structures.',NULL);
INSERT INTO defs VALUES(306,68,'function','fetchLoadout()','Returns the four-slot loadout array, seeding defaults if needed.',NULL);
INSERT INTO defs VALUES(307,68,'function','setLoadoutSlot(slot, powerupUuid)','Assigns a powerup to a specific slot, enforcing uniqueness.',NULL);
INSERT INTO defs VALUES(308,68,'function','clearLoadout()','Clears all player loadout selections.',NULL);
INSERT INTO defs VALUES(309,71,'signal','closeRequested()','Emitted when the user exits the MatchSetup screen.',NULL);
INSERT INTO defs VALUES(310,71,'signal','proceedRequested(var loadout)','Emitted when the player proceeds with the selected loadout.',NULL);
INSERT INTO defs VALUES(311,71,'function','refreshLoadout()','Loads the persisted loadout from the database into the UI model.',NULL);
INSERT INTO defs VALUES(312,71,'function','openCatalog(slot)','Opens the catalog overlay targeting the requested slot.',NULL);
INSERT INTO defs VALUES(313,71,'function','closeCatalog()','Hides the catalog overlay and clears the selection.',NULL);
INSERT INTO defs VALUES(314,71,'function','assignPowerupToSlot(slot, powerupUuid)','Persists a powerup selection for a specific slot and refreshes the loadout.',NULL);
INSERT INTO defs VALUES(315,71,'function','handlePowerupChosen(record)','Processes a catalog selection and updates the chosen slot.',NULL);
INSERT INTO defs VALUES(317,71,'member','catalogVisible','Controls visibility of the powerup catalog overlay.',NULL);
INSERT INTO defs VALUES(318,71,'member','selectedSlot','Tracks which slot is currently being edited.',NULL);
INSERT INTO defs VALUES(319,71,'function','deserializeSpecData(value)','Parses serialized target-spec data into runtime structures.',NULL);
INSERT INTO defs VALUES(320,70,'function','deserializeSpecData(value)','Helper that converts serialized spec data for PowerupCatalog delegates.',NULL);
INSERT INTO defs VALUES(321,71,'function','assignPowerupToSlot(slot, powerupUuid)','Persists powerup selections to the loadout table.',NULL);
INSERT INTO defs VALUES(322,71,'function','handlePowerupChosen(record)','Handles catalog selections and updates the matching slot.',NULL);
INSERT INTO defs VALUES(323,71,'member','loadoutData','Array of persisted loadout entries fetched from the database.',NULL);
INSERT INTO defs VALUES(324,71,'member','selectedSlot','Index of the slot currently being edited.',NULL);
INSERT INTO defs VALUES(325,71,'member','catalogVisible','True when the catalog overlay is open.',NULL);
INSERT INTO defs VALUES(326,70,'function','refresh()','Reloads catalog entries from the database into the GridView model.',NULL);
INSERT INTO defs VALUES(327,70,'function','deserializeSpecData(value)','Parses serialized spec-data strings into runtime values.',NULL);
INSERT INTO defs VALUES(328,70,'signal','powerupChosen(var record)','Emitted when the user selects a powerup from the catalog overlay.',NULL);
INSERT INTO defs VALUES(330,67,'function','deserializeSpecData(value)','Parses serialized target-spec data when loading powerups into the editor.',NULL);
INSERT INTO defs VALUES(331,71,'signal','updatedSlotData(int slot, var record)','Emitted when a slot should update its card with new powerup data.',NULL);
INSERT INTO defs VALUES(333,71,'function','deserializeSpecData(value)','Parses serialized loadout spec data to runtime values.',NULL);
INSERT INTO defs VALUES(334,71,'function','handlePowerupChosen(record)','Processes catalog selection, updates model, emits slot update, and persists choice.',NULL);
INSERT INTO defs VALUES(335,71,'member','slots','Array containing the dynamically created slot area objects.',NULL);
INSERT INTO defs VALUES(336,71,'function','createSlots()','Constructs the four slot areas dynamically and stores them in the slots array.',NULL);
INSERT INTO defs VALUES(337,71,'function','destroySlots()','Destroys any existing slot area instances and clears the slots array.',NULL);
INSERT INTO defs VALUES(338,71,'component','slotAreaComponent','Reusable Item definition representing a single powerup slot with embedded PowerupCard.',NULL);
INSERT INTO defs VALUES(339,51,'member','','Computed grid height from rows, cell height, and vertical gaps for spawn offsets.',NULL);
INSERT INTO defs VALUES(340,51,'function','getBlockEntryAt(row, column)','Returns the block entry item at the requested grid coordinates or null when empty or out of range.',NULL);
INSERT INTO defs VALUES(344,51,'function','fillGrid()','Placeholder hook for populating the blocks model; actual entries supplied elsewhere after revert.',NULL);
INSERT INTO defs VALUES(345,51,'function','getBlockWrapper(row, column)','Returns the GameDragItem delegate at the specified grid coordinates or null when unavailable.',NULL);
INSERT INTO defs VALUES(346,46,'member',NULL,'Item colorRing renders 15 rectangles that orbit in a circular path with random colors.',NULL);
INSERT INTO defs VALUES(347,51,'member',NULL,'Counter reserved for generating unique block IDs when fill logic is restored.',NULL);
INSERT INTO defs VALUES(352,51,'function','indexFor(row, column)','Calculates the linear model index for a given row and column in the grid.',NULL);
INSERT INTO defs VALUES(353,51,'function','findModelIndexByItemName(blockId)','Searches the ListModel for an entry matching the provided block identifier.',NULL);
INSERT INTO defs VALUES(354,51,'function','findWrapperByItemName(blockId)','Returns the GameDragItem wrapper whose entry carries the requested block identifier.',NULL);
INSERT INTO defs VALUES(355,53,'member',NULL,'Grid row index metadata reserved for future gravity handling.',NULL);
INSERT INTO defs VALUES(356,53,'member',NULL,'Grid column index metadata reserved for future gravity handling.',NULL);
INSERT INTO defs VALUES(357,53,'member',NULL,'Maximum row count placeholder the block can use when repositioning.',NULL);
INSERT INTO defs VALUES(358,53,'member',NULL,'Reserved array for lower block references (currently unused).',NULL);
INSERT INTO defs VALUES(359,51,'member',NULL,'Ordered list of valid BattleGrid states used for validation.',NULL);
INSERT INTO defs VALUES(360,51,'member',NULL,'Current BattleGrid state string; defaults to init.',NULL);
INSERT INTO defs VALUES(361,51,'member',NULL,'Last BattleGrid state before the most recent transition.',NULL);
INSERT INTO defs VALUES(362,51,'member',NULL,'Flag set while a state transition callback is executing to avoid reentry.',NULL);
INSERT INTO defs VALUES(363,51,'member',NULL,'Helper object exposing the current state name and equality test.',NULL);
INSERT INTO defs VALUES(364,51,'member',NULL,'FIFO collection of pending BattleGrid queue events.',NULL);
INSERT INTO defs VALUES(365,51,'member',NULL,'Tracks whether the queue is actively processing events.',NULL);
INSERT INTO defs VALUES(366,51,'member',NULL,'Reference to the queue item currently being processed.',NULL);
INSERT INTO defs VALUES(367,51,'member',NULL,'Active Lib.Promise instance awaiting queue completion.',NULL);
INSERT INTO defs VALUES(368,51,'signal','stateTransitionStarted(fromState, toState, metadata)','Emitted just before the current state changes.',NULL);
INSERT INTO defs VALUES(369,51,'signal','stateTransitionFinished(fromState, toState, metadata)','Emitted after the state has been updated.',NULL);
INSERT INTO defs VALUES(370,51,'signal','stateTransitionRejected(requestedState, reason, metadata)','Sent when setState is asked to use an invalid or blocked state.',NULL);
INSERT INTO defs VALUES(371,51,'signal','queueItemStarted(item)','Fires when a queue entry begins processing.',NULL);
INSERT INTO defs VALUES(372,51,'signal','queueItemCompleted(item, context)','Fires when the active queue entry signals completion.',NULL);
INSERT INTO defs VALUES(373,51,'function','normalizeStateName(value)','Normalizes state tokens by trimming and lower-casing user input.',NULL);
INSERT INTO defs VALUES(374,51,'function','isValidState(value)','Checks whether a requested state is part of the supported list.',NULL);
INSERT INTO defs VALUES(375,51,'function','setState(nextState, metadata)','Transitions the grid to a new state while emitting change notifications.',NULL);
INSERT INTO defs VALUES(376,51,'function','ensureState(targetState, metadata)','Helper that only triggers setState when the target differs.',NULL);
INSERT INTO defs VALUES(377,51,'function','initializeQueuePromise()','Creates a new Lib.Promise tied to queue completion events.',NULL);
INSERT INTO defs VALUES(378,51,'function','disposeQueuePromise()','Disconnects and destroys the active queue promise instance.',NULL);
INSERT INTO defs VALUES(379,51,'function','handleQueuePromiseFulfilled()','Restarts the queue timer once the current promise resolves.',NULL);
INSERT INTO defs VALUES(380,51,'function','finishActiveQueueItem(context)','Convenience wrapper that emits queueItemCompleted with the active item.',NULL);
INSERT INTO defs VALUES(381,51,'function','enqueueBattleEvent(eventObject)','Adds a new event to the queue and starts processing if idle.',NULL);
INSERT INTO defs VALUES(382,51,'function','processNextQueueItem()','Dequeues the next item, wires promise callbacks, and executes stage hooks.',NULL);
INSERT INTO defs VALUES(383,51,'member',NULL,'Promise object that resolves when initial powerup data arrives.',NULL);
INSERT INTO defs VALUES(384,51,'function','resetInitializationPromise()','Destroys any existing initialization promise before creating a new one.',NULL);
INSERT INTO defs VALUES(385,51,'function','createInitializationPromise()','Creates and stores a new initialization promise instance.',NULL);
INSERT INTO defs VALUES(386,51,'function','handleCurrentStateChanged(newState, oldState)','Routes state updates to the appropriate handlers.',NULL);
INSERT INTO defs VALUES(387,51,'function','enqueueInitializationTransition()','Queues the initialization state transition event.',NULL);
INSERT INTO defs VALUES(388,51,'function','handleInitialPowerupDataLoaded(powerupData)','Resolves the initialization promise when base powerup data arrives.',NULL);
INSERT INTO defs VALUES(389,51,'function','enqueueInitialStateBootstrap()','Queues the initial state entry event to kick off the BattleGrid lifecycle.',NULL);
INSERT INTO defs VALUES(390,51,'function','isPromiseLike(value)','Utility that detects promise-like objects returned from queue hooks.',NULL);
INSERT INTO defs VALUES(391,51,'function','enqueueInitializedState(payload)','Queues the final initialization state event that sets the grid to initialized.',NULL);
CREATE TABLE refs (
  id INTEGER PRIMARY KEY,
  def_id INTEGER NOT NULL,
  reference_def_id INTEGER NOT NULL,
  FOREIGN KEY(def_id) REFERENCES defs(id),
  FOREIGN KEY(reference_def_id) REFERENCES defs(id)
);
CREATE TABLE changes (
  id INTEGER PRIMARY KEY,
  title TEXT NOT NULL,
  context TEXT,
  status TEXT NOT NULL
);
INSERT INTO changes VALUES(1,'Align process with AGENTS instructions','Ensure WHEEL.db exists, populated, and change tracking uses the database.\nCreate required change/todo entries for current work.','Complete');
INSERT INTO changes VALUES(2,'Add Powerup editor scene','Need a dedicated PowerupEditor view reachable from the main menu.\nHook up Powerup Editor button and include file in build.','Complete');
INSERT INTO changes VALUES(3,'Introduce Powerup database interface','Need a QML data access wrapper for powerup storage via LocalStorage.\nMust add placeholder implementation and include it in the build.','Complete');
INSERT INTO changes VALUES(4,'Add PowerupItem data model','Need data-only PowerupItem component with computed energy cost for powerup cards.\nMust register new file with build and expose properties/functions for future use.','Complete');
INSERT INTO changes VALUES(5,'Implement Powerup catalog UI','Need a catalog that lists powerups using PowerupDatabase.\nPowerupCard must expose PowerupItem data and display entries.\nAdd differentiation between built-in and custom powerups.','Complete');
INSERT INTO changes VALUES(6,'Enhance powerup catalog visuals and integration','Catalog needs to serve PowerupEditor with real data and richer card visuals.\nReplace placeholder fallback data, wire catalog into editor, and show iconography tied to target specs.','Complete');
INSERT INTO changes VALUES(7,'Persist powerups in SQL schema','Need actual tables instead of placeholder fallback data.\nEnsure built-in powerups seed the database and fetchAllPowerups reads from SQL.','Complete');
INSERT INTO changes VALUES(8,'Powerup editor form and color workflow','Need editable powerup form with block selector and color-aware cards.\nAdd powerupCardColor property, card visuals, and integrate the catalog with editing.','Complete');
INSERT INTO changes VALUES(9,'Persist powerup editor CRUD','Powerup editor needs new/save/delete workflow with database helpers.\nAdd PowerupDatabase CRUD helpers, integrate catalog refresh, and provide UI actions in editor.','Complete');
INSERT INTO changes VALUES(10,'Fix PowerupItem naming for QML compliance','Uppercase property identifiers in PowerupItem.qml cause QML compile errors.\nRename read-only maps to lowercase and update references.','Complete');
INSERT INTO changes VALUES(11,'Implement MatchSetup powerup selection screen','Need a pre-match UI to choose four powerup cards with catalog picker.\nPersist chosen powerups in PowerupDatabase and ensure selections reload on open.','Complete');
INSERT INTO changes VALUES(12,'Implement MatchSetup powerup selection screen','Need a pre-match UI to choose four powerup cards with catalog picker.\nPersist chosen powerups in PowerupDatabase and ensure selections reload on open.','Complete');
INSERT INTO changes VALUES(13,'BattleGrid block drop from top','Blocks should spawn above the grid and animate into position instead of appearing in-place. Requires BattleGrid delegate adjustments and factory spawn tweaks.','Complete');
INSERT INTO changes VALUES(14,'Implement BattleGrid entry lookup','BattleGrid getBlockEntryAt should return the block entry item for a given grid coordinate.','Complete');
INSERT INTO changes VALUES(15,'Preserve column order on BattleGrid refill','When refilling BattleGrid after removals the model should compact per-column so blocks stay within their column.','Complete');
INSERT INTO changes VALUES(16,'BattleGrid directional placeholder compaction','Convert BattleGrid refill to use placeholder entries that bubble per-column based on fill direction.','Complete');
INSERT INTO changes VALUES(17,'Add DebugScene color ring','Add circle of colored rectangles to debug scene for visualization.','Complete');
INSERT INTO changes VALUES(18,'Animate DebugScene color ring','Rotate color ring so rectangles orbit without tilting.','Complete');
INSERT INTO changes VALUES(19,'BattleGrid destruction cascade','Add dependency wiring so blocks drop when lower blocks are destroyed and prune destroyed entries.','Complete');
INSERT INTO changes VALUES(20,'Resync metadata after manual revert','User reverted prior battle grid automation; update WHEEL listings to match current code.','Complete');
INSERT INTO changes VALUES(21,'Add BattleGrid state machine scaffold','Provide state tracking API and signals in BattleGrid for upcoming queue integration.','Complete');
CREATE TABLE change_files (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  file_id INTEGER NOT NULL,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(file_id) REFERENCES files(id)
);
INSERT INTO change_files VALUES(1,1,33);
INSERT INTO change_files VALUES(2,2,34);
INSERT INTO change_files VALUES(3,2,66);
INSERT INTO change_files VALUES(4,2,67);
INSERT INTO change_files VALUES(5,3,66);
INSERT INTO change_files VALUES(6,3,68);
INSERT INTO change_files VALUES(7,4,66);
INSERT INTO change_files VALUES(8,4,69);
INSERT INTO change_files VALUES(9,5,66);
INSERT INTO change_files VALUES(10,5,68);
INSERT INTO change_files VALUES(11,5,69);
INSERT INTO change_files VALUES(12,5,58);
INSERT INTO change_files VALUES(13,5,70);
INSERT INTO change_files VALUES(14,6,68);
INSERT INTO change_files VALUES(15,6,69);
INSERT INTO change_files VALUES(16,6,58);
INSERT INTO change_files VALUES(17,6,70);
INSERT INTO change_files VALUES(18,6,67);
INSERT INTO change_files VALUES(19,7,68);
INSERT INTO change_files VALUES(20,8,69);
INSERT INTO change_files VALUES(21,8,58);
INSERT INTO change_files VALUES(22,8,70);
INSERT INTO change_files VALUES(23,8,68);
INSERT INTO change_files VALUES(24,8,67);
INSERT INTO change_files VALUES(25,9,68);
INSERT INTO change_files VALUES(26,9,70);
INSERT INTO change_files VALUES(27,9,67);
INSERT INTO change_files VALUES(28,10,69);
INSERT INTO change_files VALUES(29,10,58);
INSERT INTO change_files VALUES(30,10,67);
INSERT INTO change_files VALUES(31,12,66);
INSERT INTO change_files VALUES(32,12,68);
INSERT INTO change_files VALUES(33,12,71);
INSERT INTO change_files VALUES(34,13,51);
INSERT INTO change_files VALUES(35,13,47);
INSERT INTO change_files VALUES(36,14,51);
INSERT INTO change_files VALUES(37,15,51);
INSERT INTO change_files VALUES(38,16,51);
INSERT INTO change_files VALUES(39,17,46);
INSERT INTO change_files VALUES(40,18,46);
INSERT INTO change_files VALUES(41,19,51);
INSERT INTO change_files VALUES(42,19,53);
INSERT INTO change_files VALUES(43,20,33);
INSERT INTO change_files VALUES(44,20,51);
INSERT INTO change_files VALUES(45,20,53);
INSERT INTO change_files VALUES(46,21,51);
CREATE TABLE change_defs (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  file_id INTEGER NOT NULL,
  def_id INTEGER,
  description TEXT,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(file_id) REFERENCES files(id),
  FOREIGN KEY(def_id) REFERENCES defs(id)
);
INSERT INTO change_defs VALUES(1,1,33,NULL,'Create and populate WHEEL.db tables with project metadata per AGENTS instructions.');
INSERT INTO change_defs VALUES(2,2,34,NULL,'Handle powerupEditorChosen by showing a PowerupEditor scene.');
INSERT INTO change_defs VALUES(3,2,66,NULL,'Add game/PowerupEditor.qml to the QML module inputs.');
INSERT INTO change_defs VALUES(4,2,67,NULL,'Define PowerupEditor scene QML skeleton for editing powerups.');
INSERT INTO change_defs VALUES(5,3,66,NULL,'Register game/data/PowerupDatabase.qml with the QML module in CMake.');
INSERT INTO change_defs VALUES(6,3,68,NULL,'Stub out PowerupDatabase interface exposing LocalStorage helpers.');
INSERT INTO change_defs VALUES(7,4,66,NULL,'Register game/data/PowerupItem.qml in the qml module.');
INSERT INTO change_defs VALUES(8,4,69,NULL,'Implement PowerupItem with target data properties and energy calculation.');
INSERT INTO change_defs VALUES(9,5,66,NULL,'Add PowerupCatalog component to the QML module list.');
INSERT INTO change_defs VALUES(10,5,68,NULL,'Expose helper functions to fetch powerups and provide built-in fallback data.');
INSERT INTO change_defs VALUES(11,5,69,NULL,'Extend PowerupItem with name, custom flag, and energy recomputation helpers.');
INSERT INTO change_defs VALUES(12,5,58,NULL,'Refactor PowerupCard to house a PowerupItem and surface UI bindings.');
INSERT INTO change_defs VALUES(13,5,70,NULL,'Implement PowerupCatalog view that loads data from PowerupDatabase into a GridView.');
INSERT INTO change_defs VALUES(14,6,68,NULL,'Replace placeholder fallback records with curated built-in powerups and resilient loading.');
INSERT INTO change_defs VALUES(15,6,69,NULL,'Add support data needed for icon rendering (no new functions expected).');
INSERT INTO change_defs VALUES(16,6,58,NULL,'Update PowerupCard visuals to render icons and condensed stats.');
INSERT INTO change_defs VALUES(17,6,70,NULL,'Adjust catalog delegate to align with new card layout.');
INSERT INTO change_defs VALUES(18,6,67,NULL,'Embed the powerup catalog inside PowerupEditor to list available powerups.');
INSERT INTO change_defs VALUES(19,7,68,NULL,'Create SQL schema for powerups and seed built-in definitions when database is empty.');
INSERT INTO change_defs VALUES(20,8,69,NULL,'Add powerupCardColor property and target-spec data normalization helpers.');
INSERT INTO change_defs VALUES(21,8,58,NULL,'Refresh PowerupCard visuals with color palette and iconography.');
INSERT INTO change_defs VALUES(22,8,70,NULL,'Include card color data in catalog records.');
INSERT INTO change_defs VALUES(23,8,68,NULL,'Persist card colors in the Powerups table and seed data.');
INSERT INTO change_defs VALUES(24,8,67,NULL,'Embed catalog-driven edit form with block selector and control bindings.');
INSERT INTO change_defs VALUES(25,9,68,NULL,'Add CRUD helpers (create, save, delete, fetch) for powerups and shared UUID utility.');
INSERT INTO change_defs VALUES(26,9,70,NULL,'Expose database refresh so catalog can reload after CRUD operations.');
INSERT INTO change_defs VALUES(27,9,67,NULL,'Rework editor layout with catalog + form, add new/save/delete buttons and wire to database.');
INSERT INTO change_defs VALUES(28,10,69,NULL,'Rename read-only enums to lowercase identifiers in PowerupItem.');
INSERT INTO change_defs VALUES(29,10,58,NULL,'Update card bindings to use new lowercase PowerupItem enums.');
INSERT INTO change_defs VALUES(30,10,67,NULL,'Align editor references with renamed PowerupItem enum properties.');
INSERT INTO change_defs VALUES(31,12,68,NULL,'Add loadout schema and CRUD helpers for player-selected powerups.');
INSERT INTO change_defs VALUES(32,12,66,NULL,'Register MatchSetup QML screen in the build.');
INSERT INTO change_defs VALUES(33,12,71,NULL,'Implement MatchSetup UI with catalog overlay and slot management.');
INSERT INTO change_defs VALUES(34,13,51,NULL,'Compute drop height and initialize new block instances above the grid before animation.');
INSERT INTO change_defs VALUES(35,13,47,95,'Adjust Factory.createBlock to support spawning blocks above desired position and finalize after drop.');
INSERT INTO change_defs VALUES(36,14,51,340,'Add implementation for getBlockEntryAt(row, column) to return the entry item at given grid location.');
INSERT INTO change_defs VALUES(37,15,51,344,'Refactor fillGrid to fill per-column without reflow.');
INSERT INTO change_defs VALUES(38,15,51,NULL,'Add helper(s) to remove blocks and compact columns when entries are destroyed.');
INSERT INTO change_defs VALUES(39,15,51,NULL,'Add lookup helper to find block index by uid.');
INSERT INTO change_defs VALUES(40,15,51,NULL,'Ensure existing model entries carry uid/column/row metadata before refills.');
INSERT INTO change_defs VALUES(41,15,51,NULL,'Introduce counter to assign persistent block uids.');
INSERT INTO change_defs VALUES(42,15,51,NULL,'Track next color slot to keep refill hues rotating.');
INSERT INTO change_defs VALUES(43,16,51,NULL,'Add fillDirection/fillColors configuration for placeholder compaction.');
INSERT INTO change_defs VALUES(44,16,51,NULL,'Introduce compactColumn/refillColumn helpers to bubble placeholders per column.');
INSERT INTO change_defs VALUES(45,16,51,NULL,'Update handleBlockDestroyed to mark placeholder entries instead of removing them.');
INSERT INTO change_defs VALUES(46,16,51,344,'Refresh fillGrid/ensureBlockMetadata to seed placeholders and directional refills.');
INSERT INTO change_defs VALUES(47,16,51,NULL,'Expose fillColors array for configurable refill palette.');
INSERT INTO change_defs VALUES(48,16,51,NULL,'Provide placeholder fill color override for invisible slots.');
INSERT INTO change_defs VALUES(49,16,51,NULL,'Expose totalCells computed property for grid sizing.');
INSERT INTO change_defs VALUES(50,16,51,NULL,'Implement refillColumn to convert placeholders after compaction.');
INSERT INTO change_defs VALUES(51,16,51,NULL,'Expose placeholderColor helper for delegate bindings.');
INSERT INTO change_defs VALUES(52,16,51,NULL,'Add nextFillColor helper to step through grid refill palette.');
INSERT INTO change_defs VALUES(53,16,51,NULL,'Expand ensureBlockMetadata to seed placeholder entries.');
INSERT INTO change_defs VALUES(54,17,46,346,'Add Item colorRing with 15 rectangles arranged in a circle for debug visuals.');
INSERT INTO change_defs VALUES(55,18,46,346,'Animate colorRing so rectangles orbit without rotating individually.');
INSERT INTO change_defs VALUES(56,19,51,344,'Extend fillGrid to assign IDs, metadata, and kick off dependency wiring.');
INSERT INTO change_defs VALUES(57,19,51,348,'Add attachBlockHandlers to connect stacked blocks and sync model state.');
INSERT INTO change_defs VALUES(58,19,51,349,'Handle row changes by moving model entries and refreshing handlers.');
INSERT INTO change_defs VALUES(59,19,51,350,'Collect and remove destroyed blocks after cascading updates.');
INSERT INTO change_defs VALUES(60,19,51,351,'Centralize block removal for model and scene cleanup.');
INSERT INTO change_defs VALUES(61,19,53,359,'Emit rowIndexChanged so the grid can reposition blocks on falls.');
INSERT INTO change_defs VALUES(62,19,53,360,'Allow blocks to register lower neighbors for destruction monitoring.');
INSERT INTO change_defs VALUES(63,19,53,361,'Drop a block to the next row when its observed neighbor becomes destroyed.');
INSERT INTO change_defs VALUES(64,19,53,362,'Flag blocks once their row change handler has been wired.');
INSERT INTO change_defs VALUES(65,19,53,363,'Guard against reattaching block destruction monitors multiple times.');
INSERT INTO change_defs VALUES(66,20,51,344,'Update fillGrid description to reflect placeholder state after revert.');
INSERT INTO change_defs VALUES(67,20,51,347,'Revise blockSequence notes to indicate use as reserved counter.');
INSERT INTO change_defs VALUES(68,20,51,NULL,'Remove stale attachBlockHandlers entry (function no longer exists).');
INSERT INTO change_defs VALUES(69,20,51,NULL,'Remove stale handleBlockRowChanged entry (function no longer exists).');
INSERT INTO change_defs VALUES(70,20,51,NULL,'Remove stale destroyDestroyedBlocks entry (function no longer exists).');
INSERT INTO change_defs VALUES(71,20,51,NULL,'Remove stale removeBlockById entry (function no longer exists).');
INSERT INTO change_defs VALUES(72,20,53,355,'Adjust description of row metadata to note placeholder usage.');
INSERT INTO change_defs VALUES(73,20,53,356,'Adjust description of column metadata to match current code.');
INSERT INTO change_defs VALUES(74,20,53,357,'Clarify maxRows property usage after revert.');
INSERT INTO change_defs VALUES(75,20,53,358,'Describe lowerBlockRefs as currently unused placeholder.');
INSERT INTO change_defs VALUES(76,20,53,NULL,'Remove rowIndexChanged signal entry (no longer defined).');
INSERT INTO change_defs VALUES(77,20,53,NULL,'Remove registerLowerBlock entry (function removed).');
INSERT INTO change_defs VALUES(78,20,53,NULL,'Remove handleLowerBlockStateChange entry (function removed).');
INSERT INTO change_defs VALUES(79,20,53,NULL,'Remove _rowRepositionConnected entry (property removed).');
INSERT INTO change_defs VALUES(80,20,53,NULL,'Remove destroyMonitorConnected entry (property removed).');
INSERT INTO change_defs VALUES(81,21,51,359,'Add state list constant for BattleGrid state machine.');
INSERT INTO change_defs VALUES(82,21,51,360,'Expose currentState property.');
INSERT INTO change_defs VALUES(83,21,51,361,'Track previous state for observers.');
INSERT INTO change_defs VALUES(84,21,51,362,'Guard against concurrent state transitions.');
INSERT INTO change_defs VALUES(85,21,51,363,'Provide helper for checking current state equality.');
INSERT INTO change_defs VALUES(86,21,51,364,'Add queue storage collection for upcoming event sequencing.');
INSERT INTO change_defs VALUES(87,21,51,365,'Flag queueProcessing to reflect worker status.');
INSERT INTO change_defs VALUES(88,21,51,366,'Store reference to the active queue item.');
INSERT INTO change_defs VALUES(89,21,51,367,'Manage per-item promise lifecycle.');
INSERT INTO change_defs VALUES(90,21,51,368,'Emit stateChanging before transitions.');
INSERT INTO change_defs VALUES(91,21,51,369,'Emit stateChanged after transitions.');
INSERT INTO change_defs VALUES(92,21,51,370,'Signal rejected state change requests.');
INSERT INTO change_defs VALUES(93,21,51,371,'Notify observers when queue items start.');
INSERT INTO change_defs VALUES(94,21,51,372,'Notify observers when queue items complete.');
INSERT INTO change_defs VALUES(95,21,51,373,'Introduce helper to normalize requested states.');
INSERT INTO change_defs VALUES(96,21,51,374,'Add validator for state requests.');
INSERT INTO change_defs VALUES(97,21,51,375,'Expose public setState API.');
INSERT INTO change_defs VALUES(98,21,51,376,'Provide ensureState convenience wrapper.');
INSERT INTO change_defs VALUES(99,21,51,377,'Create promise instance per queue item.');
INSERT INTO change_defs VALUES(100,21,51,378,'Ensure old promises are cleaned up when idle.');
INSERT INTO change_defs VALUES(101,21,51,379,'Trigger next queue step once the promise resolves.');
INSERT INTO change_defs VALUES(102,21,51,380,'Expose helper for queue completion emissions.');
INSERT INTO change_defs VALUES(103,21,51,381,'Add enqueue API for queue items.');
INSERT INTO change_defs VALUES(104,21,51,382,'Implement queue processor that runs hooks and waits on promises.');
INSERT INTO change_defs VALUES(105,21,51,383,'Expose initializationPromise for pending powerup data.');
INSERT INTO change_defs VALUES(106,21,51,384,'Reset initialization promise before reuse.');
INSERT INTO change_defs VALUES(107,21,51,385,'Factory helper to create initialization promise instances.');
INSERT INTO change_defs VALUES(108,21,51,386,'Route currentState changes through centralized handler.');
INSERT INTO change_defs VALUES(109,21,51,387,'Queue the initialization sequence when entering init state.');
INSERT INTO change_defs VALUES(110,21,51,388,'Resolve initialization promise when powerup data is received.');
INSERT INTO change_defs VALUES(111,21,51,389,'Bootstrap queue with initial state event.');
INSERT INTO change_defs VALUES(112,21,51,390,'Detect promise-like returns from queue callbacks.');
INSERT INTO change_defs VALUES(113,21,51,391,'Queue event to mark the grid as initialized.');
CREATE TABLE todo (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  change_defs_id INTEGER,
  change_files_id INTEGER,
  description TEXT NOT NULL,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(change_defs_id) REFERENCES change_defs(id),
  FOREIGN KEY(change_files_id) REFERENCES change_files(id)
);
COMMIT;
