PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE files (
  id INTEGER PRIMARY KEY,
  relpath TEXT UNIQUE NOT NULL,
  description TEXT
);
INSERT INTO files VALUES(33,'WHEEL.db','SQLite metadata store defined in AGENTS.md for file/function and change tracking.');
INSERT INTO files VALUES(34,'Main.qml','Top-level Window that loads the main menu, shows the PowerupEditor, and toggles the DebugScene per README''s debug workflow.');
INSERT INTO files VALUES(35,'main.cpp','Qt application entry point that registers the image resource bundle, exposes the Pool type, and loads the Blockwars30 QML module.');
INSERT INTO files VALUES(36,'engine/AbstractGameItem.qml','Reusable base item that auto-registers with a GameScene and hosts child content via a Loader.');
INSERT INTO files VALUES(37,'engine/GameContainer.qml','Placeholder Item that currently exists as a convenience hook for future container-specific logic.');
INSERT INTO files VALUES(38,'engine/GameDragAndSwapItem.qml','Specialized drag item that tracks match-3 grid positions to support swap logic layered on GameDragItem.');
INSERT INTO files VALUES(39,'engine/GameDragItem.qml','Primary draggable wrapper that synchronizes loaded content with drag gestures and reports lifecycle through signals.');
INSERT INTO files VALUES(40,'engine/GameDropItem.qml','DropArea wrapper that exposes drag enter/exit signals and can auto-center compatible GameDragItem payloads.');
INSERT INTO files VALUES(41,'engine/GameDynamicItem.qml','Convenience subclass of AbstractGameItem that enforces the presence of scene and item name metadata.');
INSERT INTO files VALUES(42,'engine/GameLayout.qml','GridLayout alias used for arranging menu components with potential future custom behavior.');
INSERT INTO files VALUES(43,'engine/GameScene.qml','Central scene coordinator that tracks named items, wires drag/drop lifecycles, and emits gameplay events.');
INSERT INTO files VALUES(44,'engine/GameSpriteSheetItem.qml','Sprite-driven dynamic item that proxies AnimatedSprite settings and emits start/end callbacks for effects.');
INSERT INTO files VALUES(45,'engine/GameStaticItem.qml','Static variant of AbstractGameItem kept for parity with dynamic items when no extra behavior is needed.');
INSERT INTO files VALUES(46,'game/DebugScene.qml','Development scene embedding draggable blocks, a drop zone, and demo timers to exercise engine behaviors.');
INSERT INTO files VALUES(47,'game/factory.js','Factory helpers for constructing UI blocks wrapped in Engine.GameDragItem instances with unique names.');
INSERT INTO files VALUES(48,'game/layouts.js','Layout utilities used by BattleGrid and other grid-based views to translate linear indexes to coordinates.');
INSERT INTO files VALUES(49,'game/MainMenuScene.qml','Main menu scene exposing navigation signals and using GameLayout to stack MenuButtons.');
INSERT INTO files VALUES(50,'game/SinglePlayerScene.qml','Placeholder GameScene reserved for single-player gameplay layout.');
INSERT INTO files VALUES(51,'game/ui/BattleGrid.qml','Runtime-instantiated battle grid that spawns draggable blocks via Factory helpers and reflows them into a grid.');
INSERT INTO files VALUES(52,'game/ui/BlockExplodeParticles.qml','Particle effect container that bursts multiple emitters to simulate a block explosion.');
INSERT INTO files VALUES(53,'game/ui/Block.qml','Visual block component that swaps between idle, launch, and explode states while coordinating drop registration.');
INSERT INTO files VALUES(54,'game/ui/GridCell.qml','Drop-enabled grid cell that tracks the assigned drag item and updates visuals based on occupancy.');
INSERT INTO files VALUES(55,'game/ui/GridColumn.qml','Column ListView template that spawns placeholder GameDragItems for prototype grid column experiments.');
INSERT INTO files VALUES(56,'game/ui/Hud.qml','HUD placeholder Item reserved for future overlays.');
INSERT INTO files VALUES(57,'game/ui/MenuButton.qml','Wrapper around Qt Quick Controls Button preconfigured for menu layout usage.');
INSERT INTO files VALUES(58,'game/ui/PowerupCard.qml','Data-driven powerup card component that renders target icons and summarized stats.');
INSERT INTO files VALUES(59,'lib/promise.js','Promise library port that mirrors JavaScript Promise semantics for QML, including combinators and timers.');
INSERT INTO files VALUES(60,'lib/Promise.qml','QtObject wrapper around the JS Promise library that exposes QML-friendly resolve/reject hooks and signals.');
INSERT INTO files VALUES(61,'lib/PromiseTimer.qml','Thin Timer wrapper used by the promise utility to schedule callbacks.');
INSERT INTO files VALUES(62,'lib/qmldir','Module manifest exposing the Promise JS library and QML wrapper under `PromiseLib`.');
INSERT INTO files VALUES(63,'pool.h','QObject-derived pool that serves deterministic random numbers and color names to QML consumers.');
INSERT INTO files VALUES(64,'pool.cpp','Implementation backing Pool that reads resource data and cycles through numeric and color outputs.');
INSERT INTO files VALUES(65,'images.qrc','Qt resource collection listing sprite and UI assets bundled with the application.');
INSERT INTO files VALUES(66,'CMakeLists.txt','CMake configuration for the Blockwars30 Qt Quick application.');
INSERT INTO files VALUES(67,'game/PowerupEditor.qml','Powerup editor scene embedding the catalog and controls for managing powerups.');
INSERT INTO files VALUES(68,'game/data/PowerupDatabase.qml','Powerup database wrapper that returns stored definitions or curated built-ins when empty.');
INSERT INTO files VALUES(69,'game/data/PowerupItem.qml','Data-only representation of a powerup configuration with computed energy requirements.');
INSERT INTO files VALUES(70,'game/ui/PowerupCatalog.qml','Scrollable catalog view that lists powerup cards from the database for selection.');
INSERT INTO files VALUES(71,'game/ui/MatchSetup.qml','Pre-match setup screen for selecting player powerup loadout.');
INSERT INTO files VALUES(72,'engine/GameStateMachine.qml','Reusable component template that produces a generic state machine QtObject with transition registry support.');
INSERT INTO files VALUES(73,'game/data/BattleGridStateMachine.qml','Battle grid-specialized state machine component that augments the engine template to manage initialization transitions via the battle event queue.');
INSERT INTO files VALUES(74,'wheel.sh','Comprehensive CLI toolkit for querying, editing, and planning against WHEEL.db.');
CREATE TABLE defs (
  id INTEGER PRIMARY KEY,
  file_id INTEGER NOT NULL,
  type TEXT NOT NULL,
  parameters TEXT,
  description TEXT, signature TEXT,
  FOREIGN KEY(file_id) REFERENCES files(id)
);
INSERT INTO defs VALUES(1,34,'member','debugScene','Hidden DebugScene instance made visible when the main menu emits `debugChosen`.','id debugScene');
INSERT INTO defs VALUES(2,35,'function','int argc, char *argv[]','Boots the QGuiApplication, registers assets/types, and starts the event loop.','main(int argc, char *argv[])');
INSERT INTO defs VALUES(3,36,'function','None','Chooses the visual parent, preferring `gameScene` or `itemParent` when available.','deriveParent()');
INSERT INTO defs VALUES(4,36,'function','object','Helper that returns true when a value is strictly `undefined`.','isUndefined(object)');
INSERT INTO defs VALUES(5,36,'function','componentObject','Assigns a new source component to the internal loader.','loadComponent(componentObject)');
INSERT INTO defs VALUES(6,36,'member','gameScene','Scene reference used for registration and parent derivation.','property var gameScene');
INSERT INTO defs VALUES(7,36,'member','sceneX','Cached scene-space x coordinate for helpers.','property var sceneX: 0');
INSERT INTO defs VALUES(8,36,'member','sceneY','Cached scene-space y coordinate for helpers.','property var sceneY: 0');
INSERT INTO defs VALUES(9,36,'member','itemParent','Optional override for the loaded item''s parent Item.','property var itemParent');
INSERT INTO defs VALUES(10,36,'member','itemWidth','Stored width for layout tools and metadata syncing.','property var itemWidth');
INSERT INTO defs VALUES(11,36,'member','itemHeight','Stored height for layout tools and metadata syncing.','property var itemHeight');
INSERT INTO defs VALUES(12,36,'member','itemInstance','Slot for the instantiated child content.','property var itemInstance');
INSERT INTO defs VALUES(13,36,'member','itemName','Scene registration key for this item.','property var itemName');
INSERT INTO defs VALUES(14,36,'member','itemComponent','Alias to the Loader sourceComponent so callers can swap content.','property alias itemComponent: abstractGameItemLoader.sourceComponent');
INSERT INTO defs VALUES(15,36,'member','pendingOffsetX','Reserved horizontal offset for delayed layout adjustments.','property var pendingOffsetX: 0');
INSERT INTO defs VALUES(16,36,'member','pendingOffsetY','Reserved vertical offset for delayed layout adjustments.','property var pendingOffsetY: 0');
INSERT INTO defs VALUES(17,38,'member','visualIndex','Visual ordering hint when animating drag swaps.','property int visualIndex: 0');
INSERT INTO defs VALUES(18,38,'member','isAlreadyDisplaced','Flag indicating the block has been moved from its original slot.','property bool isAlreadyDisplaced: false');
INSERT INTO defs VALUES(19,38,'member','targetIndex','Target linear index to land on after a swap completes.','property int targetIndex: 0');
INSERT INTO defs VALUES(20,38,'member','sourceIndex','Original linear index prior to a swap.','property int sourceIndex: 0');
INSERT INTO defs VALUES(21,38,'member','columnIndex','Column coordinate inside the owning grid.','property int columnIndex: 0');
INSERT INTO defs VALUES(22,38,'member','rowIndex','Row coordinate inside the owning grid.','property int rowIndex: 0');
INSERT INTO defs VALUES(23,38,'member','startColumn','Column at drag start for rollback or analytics.','property int startColumn: 0');
INSERT INTO defs VALUES(24,38,'member','startRow','Row at drag start for rollback or analytics.','property int startRow: 0');
INSERT INTO defs VALUES(25,38,'member','entry','Reference to the visual block instance bound to this drag item.','property var entry: null');
INSERT INTO defs VALUES(26,39,'function','None','Emits `entryDestroyed` so the scene can clean up when the drag item is torn down.','destroySceneItem()');
INSERT INTO defs VALUES(27,39,'member','gameScene','Required scene reference for registration and drag callbacks.','required property var gameScene');
INSERT INTO defs VALUES(28,39,'member','itemName','Required scene identifier for this drag item.','required property var itemName');
INSERT INTO defs VALUES(29,39,'member','entry','Required visual/logic payload that mirrors the drag item''s geometry.','required property var entry');
INSERT INTO defs VALUES(30,39,'member','content','Default property alias used to provide the draggable visuals.','default property alias content: dragContentWrapper.data');
INSERT INTO defs VALUES(31,39,'member','contentItem','Alias exposing the wrapper Item for manual positioning.','property alias contentItem: dragContentWrapper');
INSERT INTO defs VALUES(32,39,'member','dragStartX','Local x coordinate recorded at the start of a drag.','property real dragStartX: 0');
INSERT INTO defs VALUES(33,39,'member','dragStartY','Local y coordinate recorded at the start of a drag.','property real dragStartY: 0');
INSERT INTO defs VALUES(34,39,'member','dragCurrentX','Placeholder for tracking the latest drag x coordinate.','property real dragCurrentX: 0');
INSERT INTO defs VALUES(35,39,'member','dragCurrentY','Placeholder for tracking the latest drag y coordinate.','property real dragCurrentY: 0');
INSERT INTO defs VALUES(36,39,'member','dragActive','True while the pointer is actively dragging this item.','property bool dragActive: false');
INSERT INTO defs VALUES(37,39,'member','payload','Array of extra drag metadata shared with drop targets.','property var payload: []');
INSERT INTO defs VALUES(38,39,'member','animationDurationX','Duration in milliseconds for the x-axis easing when repositioning.','property var animationDurationX: 200');
INSERT INTO defs VALUES(39,39,'member','animationDurationY','Duration in milliseconds for the y-axis easing when repositioning.','property var animationDurationY: 200');
INSERT INTO defs VALUES(40,39,'member','animationEnabledX','Enables or disables the x-axis easing Behavior.','property bool animationEnabledX: true');
INSERT INTO defs VALUES(41,39,'member','animationEnabledY','Enables or disables the y-axis easing Behavior.','property bool animationEnabledY: true');
INSERT INTO defs VALUES(42,39,'signal','itemName, x, y','Fired when the mouse press begins to drag this item.','signal itemDragging(string itemName, real x, real y)');
INSERT INTO defs VALUES(43,39,'signal','itemName, x, y, startX, startY','Fired when the pointer releases the drag item.','signal itemDropped(string itemName, real x, real y, real startX, real startY)');
INSERT INTO defs VALUES(44,39,'signal','itemName, x, y, offsets','Fired on mouse movement with offset data relative to drag start.','signal itemDraggedTo(string itemName, real x, real y, var offsets)');
INSERT INTO defs VALUES(45,39,'signal','itemName','Emitted prior to teardown so the owning scene can release references.','signal entryDestroyed(string itemName)');
INSERT INTO defs VALUES(46,40,'function','item','Validates that the dragged object exposes the GameDragItem API.','isGameDragItem(item)');
INSERT INTO defs VALUES(47,40,'function','dragItem','Recenters a dropped GameDragItem and mirrors coordinates back to its entry.','snapItemToCenter(dragItem)');
INSERT INTO defs VALUES(48,40,'member','gameScene','Scene reference used for registration and callbacks.','property var gameScene');
INSERT INTO defs VALUES(49,40,'member','itemName','Scene identifier for the drop surface.','property var itemName');
INSERT INTO defs VALUES(50,40,'member','content','Default property alias to populate the visible drop target.','default property alias content: contentWrapper.data');
INSERT INTO defs VALUES(51,40,'member','contentItem','Alias exposing the wrapper Item for manual tweaks.','property alias contentItem: contentWrapper');
INSERT INTO defs VALUES(52,40,'member','containsDrag','Mirrors DropArea.containsDrag so layouts can react visually.','property bool containsDrag: dropItemRoot.containsDrag');
INSERT INTO defs VALUES(53,40,'member','autoSnap','Toggles whether dropped GameDragItem payloads are recentered automatically.','property bool autoSnap: true');
INSERT INTO defs VALUES(54,40,'member','entry','Reference to the visual content bound to this drop zone.','property var entry');
INSERT INTO defs VALUES(55,40,'signal','itemName, dragEvent','Raised when an accepted drag hovers over the drop zone.','signal dragItemEntered(var itemName, var dragEvent)');
INSERT INTO defs VALUES(56,40,'signal','itemName, dragEvent','Raised when the hovering drag leaves without dropping.','signal dragItemExited(var itemName, var dragEvent)');
INSERT INTO defs VALUES(57,41,'member','gameScene','Required scene reference for dynamic items.','required property var gameScene');
INSERT INTO defs VALUES(58,41,'member','itemName','Required scene identifier.','required property var itemName');
INSERT INTO defs VALUES(59,42,'member','GridLayout','Root GridLayout wrapper reserved for future layout-specific behavior.','GridLayout { }');
INSERT INTO defs VALUES(60,43,'function','itemName','Fetches a previously registered scene item or logs an error when missing.','getSceneItem(itemName)');
INSERT INTO defs VALUES(61,43,'function','itemName','Destroys and removes a stored scene item entry.','removeSceneItem(itemName)');
INSERT INTO defs VALUES(62,43,'function','itemName, itemObject','Registers a scene item and stamps scene metadata onto it.','addSceneItem(itemName, itemObject)');
INSERT INTO defs VALUES(63,43,'function','itemName, itemObject','Registers a drag item and hooks drag lifecycle signals for scene relays.','addSceneDragItem(itemName, itemObject)');
INSERT INTO defs VALUES(64,43,'function','itemName, itemObject','Registers a drop zone and hooks enter/exit signals.','addSceneDropItem(itemName, itemObject)');
INSERT INTO defs VALUES(65,43,'function','_itemName, _dragEvent','Updates `activeDrag` when a drag enters a drop area.','handleDropItemEntered(_itemName, _dragEvent)');
INSERT INTO defs VALUES(66,43,'function','_itemName, _dragEvent','Flags the active drag as exiting so later moves clear the target.','handleDropItemExited(_itemName, _dragEvent)');
INSERT INTO defs VALUES(67,43,'function','itemName, _x, _y','Captures the drag source and emits `itemDragStarted`.','handleDragItemStartDrag(itemName, _x, _y)');
INSERT INTO defs VALUES(68,43,'function','itemName, _x, _y, offsets','Relays drag motion via `itemDragMoved`, resetting target when exiting.','handleDragItemMoved(itemName, _x, _y, offsets)');
INSERT INTO defs VALUES(69,43,'function','itemName, _x, _y, _startx, _starty','Emits `itemDroppedInDropArea` with source and target context.','handleDragItemDropped(itemName, _x, _y, _startx, _starty)');
INSERT INTO defs VALUES(70,43,'function','itemName, propsObject','Attempts to update cached metadata on a registered item.','setSceneItemProperties(itemName, propsObject)');
INSERT INTO defs VALUES(71,43,'member','sceneWidth','Optional scene width metadata for layout consumers.','property var sceneWidth');
INSERT INTO defs VALUES(72,43,'member','sceneHeight','Optional scene height metadata for layout consumers.','property var sceneHeight');
INSERT INTO defs VALUES(73,43,'member','parentScene','Reference to a parent GameScene when scenes are nested.','property var parentScene');
INSERT INTO defs VALUES(74,43,'member','sceneName','Logical identifier for this scene instance.','property var sceneName');
INSERT INTO defs VALUES(75,43,'member','sceneItems','Dictionary mapping item names to registered objects.','property var sceneItems: ({})');
INSERT INTO defs VALUES(76,43,'member','activeDrag','Struct tracking the current drag source, target, and exit state.','property var activeDrag: ({ source: null, target: null, exiting: false })');
INSERT INTO defs VALUES(77,43,'signal','itemName, dragItem, x, y','Notifies listeners that a drag began.','signal itemDragStarted(string itemName, var dragItem, real x, real y)');
INSERT INTO defs VALUES(78,43,'signal','itemName, dragItem, x, y, offsets','Broadcasts drag motion with offset data.','signal itemDragMoved(string itemName, var dragItem, real x, real y, var offsets)');
INSERT INTO defs VALUES(79,43,'signal','dragItemName, dragItem, dropItemName, dropItem, startX, startY, endX, endY','Reports successful drops to interested systems.','signal itemDroppedInDropArea(string dragItemName, var dragItem, string dropItemName, var dropItem, real startX, real startY, real endX, real endY)');
INSERT INTO defs VALUES(80,44,'function','None','Starts the internal AnimatedSprite playback.','startAnimation()');
INSERT INTO defs VALUES(81,44,'member','spriteSheetFile','Alias to the AnimatedSprite source.','property alias spriteSheetFile: spriteRoot.source');
INSERT INTO defs VALUES(82,44,'member','frameCount','Alias controlling how many frames the sprite uses.','property alias frameCount: spriteRoot.frameCount');
INSERT INTO defs VALUES(83,44,'member','loops','Alias specifying how many loops to play.','property alias loops: spriteRoot.loops');
INSERT INTO defs VALUES(84,44,'member','frameDuration','Alias controlling per-frame duration in milliseconds.','property alias frameDuration: spriteRoot.frameDuration');
INSERT INTO defs VALUES(85,44,'member','frameWidth','Alias assigning frame width for the sprite sheet.','property alias frameWidth: spriteRoot.frameWidth');
INSERT INTO defs VALUES(86,44,'member','frameHeight','Alias assigning frame height for the sprite sheet.','property alias frameHeight: spriteRoot.frameHeight');
INSERT INTO defs VALUES(87,44,'signal','itemName','Emitted when the animation finishes.','signal animationEndCallback(var itemName)');
INSERT INTO defs VALUES(88,44,'signal','itemName','Emitted when the animation starts running.','signal animationBeginCallback(var itemName)');
INSERT INTO defs VALUES(89,45,'member','AbstractGameItem','Static AbstractGameItem instance kept for parity with dynamic game items.','AbstractGameItem { }');
INSERT INTO defs VALUES(90,46,'function','color','Uses Factory.createBlock to spawn a draggable block with the requested color.','createBlock(color)');
INSERT INTO defs VALUES(91,46,'member','blocks','Array tracking the currently instantiated draggable block items.','property var blocks: []');
INSERT INTO defs VALUES(92,46,'member','checkRefillTimer','Incrementing counter used by the timer-driven launch sequence.','property alias checkRefillTimer: checkRefillTimer');
INSERT INTO defs VALUES(94,47,'function','prefix','Generates a quasi-unique identifier using time and an incrementing sequence.','uid(prefix)');
INSERT INTO defs VALUES(95,47,'function','blockComp, dragComp, parent, gameScene, opts','Creates a UI.Block inside a GameDragItem, with optional spawnFromAbove/dropOffsetY support to animate a fall-in before registering to the scene.','createBlock(blockComp, dragComp, parent, gameScene, opts)');
INSERT INTO defs VALUES(96,47,'member','_seq','Internal counter feeding uid generation.','let _seq = 0;');
INSERT INTO defs VALUES(97,48,'function','index, o','Returns `{x, y, row, col}` coordinates inside a configurable grid footprint.','gridPos(index, o)');
INSERT INTO defs VALUES(98,49,'signal','None','Triggered when the Single Player button is pressed.','signal singlePlayerChosen()');
INSERT INTO defs VALUES(99,49,'signal','None','Triggered when the Multiplayer button is pressed.','signal multiPlayerChosen()');
INSERT INTO defs VALUES(100,49,'signal','None','Triggered when the Powerup Editor button is pressed.','signal powerupEditorChosen()');
INSERT INTO defs VALUES(101,49,'signal','None','Triggered when the Options button is pressed.','signal optionsChosen()');
INSERT INTO defs VALUES(102,49,'signal','None','Triggered when the Debug button is pressed.','signal debugChosen()');
INSERT INTO defs VALUES(103,49,'signal','None','Triggered when the Exit button is pressed.','signal exitChosen()');
INSERT INTO defs VALUES(105,51,'member','gameScene','Scene reference required when registering new drag items.','property var gameScene');
INSERT INTO defs VALUES(106,51,'member','gridCols','Number of columns in the grid.','property int gridCols: 6');
INSERT INTO defs VALUES(107,51,'member','gridRows','Number of rows in the grid.','property int gridRows: 6');
INSERT INTO defs VALUES(108,51,'member','cellW','Width of each grid cell in pixels.','property int cellW: 50');
INSERT INTO defs VALUES(109,51,'member','cellH','Height of each grid cell in pixels.','property int cellH: 50');
INSERT INTO defs VALUES(110,51,'member','gapX','Horizontal spacing between cells.','property int gapX: 2');
INSERT INTO defs VALUES(111,51,'member','gapY','Vertical spacing between cells.','property int gapY: 2');
INSERT INTO defs VALUES(112,51,'member','originX','Horizontal offset applied to the entire grid footprint.','property int originX: 40');
INSERT INTO defs VALUES(113,51,'member','originY','Vertical offset applied to the entire grid footprint.','property int originY: 40');
INSERT INTO defs VALUES(114,51,'member','instances','Array tracking created GameDragItem instances for later reflow or cleanup.','property var instances: []');
INSERT INTO defs VALUES(115,52,'function','xpos, ypos','Triggers each emitter at the given coordinate to play the explosion sequence.','burstAt(xpos, ypos)');
INSERT INTO defs VALUES(116,52,'member','system','Exposes the internal ParticleSystem for advanced tuning.','property var system');
INSERT INTO defs VALUES(117,53,'function','None','Produces the expected sprite sheet URL for the current block color.','blockLaunchSpriteSheet()');
INSERT INTO defs VALUES(118,53,'member','blockColor','Logical color for sprite selection and styling.','property var blockColor');
INSERT INTO defs VALUES(119,53,'member','source','Alias to the Loader source for direct component swapping.','property alias source: blockLoader.source');
INSERT INTO defs VALUES(120,53,'member','gameScene','Scene reference used for registering the internal drop item.','property var gameScene');
INSERT INTO defs VALUES(121,53,'member','itemName','Scene identifier shared with the drop item.','property var itemName');
INSERT INTO defs VALUES(122,53,'member','row','High-level state driving which visual component is loaded.','property int row: -1');
INSERT INTO defs VALUES(123,53,'member','column','Component definition used when the block launches.','property int column: -1');
INSERT INTO defs VALUES(124,53,'member','maxRows','Component definition used during idle state.','property int maxRows: 0');
INSERT INTO defs VALUES(125,53,'member','blockState','Component definition used during explosion.','property var blockState: "init"');
INSERT INTO defs VALUES(126,53,'signal','itemName','Emitted when the post-launch timer completes and the block should be removed.','signal blockDestroyed(var itemName)');
INSERT INTO defs VALUES(127,54,'function','None','Returns true when a drag item is currently assigned to the cell.','hasItem()');
INSERT INTO defs VALUES(128,54,'function','None','Clears the recorded drag item assignment.','clearAssignment()');
INSERT INTO defs VALUES(129,54,'function','dragItem','Reuses snapItemToCenter to align a drag item with the cell center.','centerItem(dragItem)');
INSERT INTO defs VALUES(130,54,'member','rowIndex','Row coordinate within the parent grid.','property int rowIndex: -1');
INSERT INTO defs VALUES(131,54,'member','columnIndex','Column coordinate within the parent grid.','property int columnIndex: -1');
INSERT INTO defs VALUES(132,54,'member','battleGrid','Back-reference to the owning BattleGrid Item.','property Item battleGrid: null');
INSERT INTO defs VALUES(133,54,'member','assignedItem','Currently assigned drag item, if any.','property var assignedItem: null');
INSERT INTO defs VALUES(134,54,'member','__gridRegistered','Internal flag indicating registration with the grid.','property bool __gridRegistered: false');
INSERT INTO defs VALUES(135,54,'member','idleColor','Fill color when the cell is empty.','property color idleColor: "transparent"');
INSERT INTO defs VALUES(136,54,'member','hoverColor','Fill color while an accepted drag hovers over the cell.','property color hoverColor: "#33FFFFFF"');
INSERT INTO defs VALUES(137,54,'member','occupiedColor','Fill color when the cell holds a block.','property color occupiedColor: "#3340FF80"');
INSERT INTO defs VALUES(138,54,'member','borderColor','Border color used when debug borders are enabled.','property color borderColor: "#335D6C7C"');
INSERT INTO defs VALUES(139,54,'member','showDebugBorder','Toggles whether the border is drawn for debugging.','property bool showDebugBorder: false');
INSERT INTO defs VALUES(140,54,'signal','item','Emitted whenever `assignedItem` updates.','signal assignmentChanged(var item)');
INSERT INTO defs VALUES(141,55,'member','cellModel','Backing data model used to populate the column (defaults to 6 rows).','property var cellModel: []');
INSERT INTO defs VALUES(142,55,'member','rowCount','Row count hint for external configuration.','property var rowCount: 6');
INSERT INTO defs VALUES(143,55,'member','root','Optional reference to the owning grid container.','property var root');
INSERT INTO defs VALUES(144,55,'member','columnIndex','Column coordinate for this ListView.','property int columnIndex: 0');
INSERT INTO defs VALUES(145,55,'member','gameScene','Scene reference passed to delegate GameDragItems.','property var gameScene');
INSERT INTO defs VALUES(146,57,'member','parentItem','Optional reference to the scene item that owns the button.','property var parentItem');
INSERT INTO defs VALUES(147,57,'member','buttonText','Alias to the button text for quick assignment.','property alias buttonText: buttonRoot.text');
INSERT INTO defs VALUES(152,59,'function','timerId','Stops and destroys a previously scheduled PromiseTimer.','clearTimeout(timerId)');
INSERT INTO defs VALUES(153,59,'function','callback, timeout','Schedules a PromiseTimer to invoke the callback after the timeout and returns its id.','setTimeout(callback, timeout)');
INSERT INTO defs VALUES(154,59,'function','executor','Constructor implementing a Promise-like object with fulfillment/rejection handlers.','QPromise(executor)');
INSERT INTO defs VALUES(155,59,'function','object','Detects promises created by this JS library.','instanceOfPromiseJS(object)');
INSERT INTO defs VALUES(156,59,'function','object','Detects QML Promise objects exposed by Promise.qml.','instanceOfPromiseItem(object)');
INSERT INTO defs VALUES(157,59,'function','object','Returns true for either JS or QML promise variants.','instanceOfPromise(object)');
INSERT INTO defs VALUES(158,59,'function','object','Checks whether the argument behaves like a Qt signal (has connect/disconnect).','_instanceOfSignal(object)');
INSERT INTO defs VALUES(159,59,'function','onFulfilled, onRejected','Chains fulfillment and rejection handlers, returning a new QPromise.','QPromise.prototype.then(onFulfilled, onRejected)');
INSERT INTO defs VALUES(160,59,'function','value','Resolves the promise, assimilating other promises or signals when provided.','QPromise.prototype.resolve(value)');
INSERT INTO defs VALUES(161,59,'function','value','Defers resolution to the next event loop tick.','QPromise.prototype._resolveInTick(value)');
INSERT INTO defs VALUES(162,59,'function','value','Resolves immediately without additional checks.','QPromise.prototype._resolveUnsafe(value)');
INSERT INTO defs VALUES(163,59,'function','reason','Rejects the promise, optionally wiring Qt signals to propagate rejection.','QPromise.prototype.reject(reason)');
INSERT INTO defs VALUES(164,59,'function','reason','Rejects immediately without additional checks.','QPromise.prototype._rejectUnsafe(reason)');
INSERT INTO defs VALUES(165,59,'function','arr, value','Runs stored callbacks in order, passing along the result.','QPromise.prototype._emit(arr, value)');
INSERT INTO defs VALUES(166,59,'function','None','Executes queued fulfillment or rejection handlers based on state.','QPromise.prototype._executeThen()');
INSERT INTO defs VALUES(167,59,'function','state','Updates the state flags for fulfilled/rejected/settled tracking.','QPromise.prototype._setState(state)');
INSERT INTO defs VALUES(168,59,'function','executor','Convenience creator returning a new pending QPromise.','promise(executor)');
INSERT INTO defs VALUES(169,59,'function','result','Returns a resolved QPromise with the provided result.','resolve(result)');
INSERT INTO defs VALUES(170,59,'function','result','Alias of resolve for compatibility.','resolved(result)');
INSERT INTO defs VALUES(171,59,'function','reason','Returns a rejected QPromise with the provided reason.','reject(reason)');
INSERT INTO defs VALUES(172,59,'function','reason','Alias of reject for compatibility.','rejected(reason)');
INSERT INTO defs VALUES(173,59,'function','promises, allSettled','Aggregator responsible for resolving once a set of promises complete.','Combinator(promises, allSettled)');
INSERT INTO defs VALUES(174,59,'function','promises','Adds one or more promises to the combinator pool.','Combinator.prototype.add(promises)');
INSERT INTO defs VALUES(175,59,'function','promises','Internal helper to append an array-like collection of promises.','Combinator.prototype._addPromises(promises)');
INSERT INTO defs VALUES(176,59,'function','promise','Adds a single promise, wrapping signals when encountered.','Combinator.prototype._addPromise(promise)');
INSERT INTO defs VALUES(177,59,'function','promise','Hooks fulfillment/rejection callbacks to track progress.','Combinator.prototype._addCheckedPromise(promise)');
INSERT INTO defs VALUES(178,59,'function','reason','Handles rejection depending on the allSettled mode.','Combinator.prototype._reject(reason)');
INSERT INTO defs VALUES(179,59,'function','None','Resolves or rejects the combined promise when all inputs complete.','Combinator.prototype._settle()');
INSERT INTO defs VALUES(180,59,'function','promises, allSettled','Factory that returns a new Combinator instance.','combinator(promises, allSettled)');
INSERT INTO defs VALUES(181,59,'function','promises','Returns a promise fulfilled when all input promises resolve, or rejects on the first failure.','all(promises)');
INSERT INTO defs VALUES(182,59,'function','promises','Returns a promise that resolves after all inputs settle, collecting their results.','allSettled(promises)');
INSERT INTO defs VALUES(183,59,'member','QPromise.all','Assigned to the `all` helper to mirror native Promise.all.','QPromise.all = all');
INSERT INTO defs VALUES(184,59,'member','QPromise.resolve','Assigned to the `resolve` helper for parity with native Promise.resolve.','QPromise.resolve = resolve');
INSERT INTO defs VALUES(185,59,'member','QPromise.reject','Assigned to the `reject` helper for parity with native Promise.reject.','QPromise.reject = reject');
INSERT INTO defs VALUES(186,60,'function','callback, interval','Delegates to QPTimer to schedule a callback after the interval.','setTimeout(callback, interval)');
INSERT INTO defs VALUES(187,60,'function','onFulfilled, onRejected','Chains handlers onto the underlying JS promise.','then(onFulfilled, onRejected)');
INSERT INTO defs VALUES(188,60,'function','value','Resolves the internal promise, assimilating other promise-like objects when provided.','resolve(value)');
INSERT INTO defs VALUES(189,60,'function','reason','Rejects the internal promise.','reject(reason)');
INSERT INTO defs VALUES(190,60,'function','promises','Returns a JS promise that resolves when all supplied promises fulfill.','all(promises)');
INSERT INTO defs VALUES(191,60,'function','promises','Returns a JS promise that resolves once all supplied promises settle.','allSettled(promises)');
INSERT INTO defs VALUES(192,60,'function','object','Checks whether an object is an instance of this QML promise wrapper.','instanceOfPromise(object)');
INSERT INTO defs VALUES(193,60,'function','object','Delegates to PromiseJS helper to test for Qt signals.','_instanceOfSignal(object)');
INSERT INTO defs VALUES(194,60,'function','None','Lazily constructs the underlying JS promise and wires state signals.','_init()');
INSERT INTO defs VALUES(195,60,'member','data','Default property alias enabling inline child objects.','default property alias data: promise.__data');
INSERT INTO defs VALUES(196,60,'member','__data','Backing list holding inline child objects.','property list<QtObject> __data: [QtObject{}]');
INSERT INTO defs VALUES(197,60,'member','isFulfilled','True when the promise has resolved.','property bool isFulfilled : false');
INSERT INTO defs VALUES(198,60,'member','isRejected','True when the promise has rejected.','property bool isRejected : false');
INSERT INTO defs VALUES(199,60,'member','isSettled','Computed flag indicating the promise has either resolved or rejected.','property bool isSettled : isFulfilled || isRejected');
INSERT INTO defs VALUES(200,60,'member','resolveWhen','Expression or promise that auto-resolves this object when it becomes truthy/completes.','property var resolveWhen');
INSERT INTO defs VALUES(201,60,'member','rejectWhen','Expression or signal that auto-rejects this object when it becomes truthy.','property var rejectWhen');
INSERT INTO defs VALUES(202,60,'member','_promise','Internal reference to the JS QPromise instance.','property var _promise;');
INSERT INTO defs VALUES(203,60,'member','___promiseQmlSignature71237___','Marker used for type checking between JS and QML worlds.','property var ___promiseQmlSignature71237___');
INSERT INTO defs VALUES(204,60,'signal','value','Emitted when the promise resolves successfully.','signal fulfilled(var value)');
INSERT INTO defs VALUES(205,60,'signal','reason','Emitted when the promise rejects.','signal rejected(var reason)');
INSERT INTO defs VALUES(206,60,'signal','value','Emitted after fulfillment or rejection for generic observers.','signal settled(var value)');
INSERT INTO defs VALUES(207,61,'member','Timer','Single-shot Timer backing the JS promise scheduling helper.','Timer { running: false; repeat: false }');
INSERT INTO defs VALUES(208,62,'member','PromiseLib','Declares the module name `PromiseLib`.','module PromiseLib');
INSERT INTO defs VALUES(209,62,'member','promise.js','Maps the JavaScript library for import.','Q 1.0 promise.js');
INSERT INTO defs VALUES(210,62,'member','Promise.qml','Registers the QML Promise type.','Promise 1.0 Promise.qml');
INSERT INTO defs VALUES(211,63,'function','QObject *parent = nullptr','Constructor that initializes the pool.','Pool(QObject *parent = nullptr)');
INSERT INTO defs VALUES(212,63,'function','None','Loads numeric data from the embedded random_numbers resource.','loadNumbers()');
INSERT INTO defs VALUES(213,63,'function','int current_index = -1','Returns the next value from the number pool, optionally seeding the index.','randomNumber(int current_index = -1)');
INSERT INTO defs VALUES(214,63,'function','int current_index = -1','Maps the next pooled number to a block color string.','nextColor(int current_index = -1)');
INSERT INTO defs VALUES(215,63,'member','m_numbers','QHash storing loaded number entries keyed by index.','QHash<int, int> m_numbers;');
INSERT INTO defs VALUES(216,63,'member','pool_index','Tracks the current index into the number pool.','int pool_index;');
INSERT INTO defs VALUES(217,64,'function','QObject *parent','Invokes loadNumbers during construction.','Pool::Pool(QObject *parent)');
INSERT INTO defs VALUES(218,64,'function','None','Reads random_numbers.txt from resources and seeds the number hash.','Pool::loadNumbers()');
INSERT INTO defs VALUES(219,64,'function','int current_index','Steps through the stored numbers and returns the next entry.','Pool::randomNumber(int current_index)');
INSERT INTO defs VALUES(220,64,'function','int current_index','Converts the next numeric entry into a color name.','Pool::nextColor(int current_index)');
INSERT INTO defs VALUES(222,65,'member','prefix=/','Root Qt resource collection mapping runtime assets bundled with the application.','<qresource prefix="/">');
INSERT INTO defs VALUES(223,34,'member','powerupEditor','PowerupEditor scene instance shown when the menu requests editing.','id powerupEditor');
INSERT INTO defs VALUES(224,67,'signal','None','Emitted when the user wants to return to the main menu from the editor.','signal closeRequested()');
INSERT INTO defs VALUES(225,68,'function','None','Returns the cached LocalStorage database connection, opening it on demand.','open()');
INSERT INTO defs VALUES(226,68,'function','callback','Runs the provided callback inside a write transaction on the LocalStorage database.','withTransaction(callback)');
INSERT INTO defs VALUES(227,68,'function','sql, parameters','Executes a SQL statement and returns the raw SQLite result object.','execute(sql, parameters)');
INSERT INTO defs VALUES(228,68,'function','sql, parameters','Executes a read query and returns an array of row objects.','queryAll(sql, parameters)');
INSERT INTO defs VALUES(229,68,'function','None','Placeholder hook to create required tables before use.','ensureSchema()');
INSERT INTO defs VALUES(230,68,'member','databaseName','Name used when opening the LocalStorage database.','property string databaseName: "BlockwarsPowerups"');
INSERT INTO defs VALUES(231,68,'member','databaseVersion','Semantic version string passed to LocalStorage.','property string databaseVersion: "1.0"');
INSERT INTO defs VALUES(232,68,'member','databaseLabel','Display label for the LocalStorage database instance.','property string databaseLabel: "Blockwars Powerup Database"');
INSERT INTO defs VALUES(233,68,'member','estimatedSize','Requested initial file size in bytes (defaults to 5 MB).','property int estimatedSize: 5 * 1024 * 1024');
INSERT INTO defs VALUES(234,68,'member','__connection','Cached handle to the open LocalStorage database.','property var __connection: null');
INSERT INTO defs VALUES(235,68,'signal','None','Emitted after ensureSchema finishes running schema setup.','signal schemaReady()');
INSERT INTO defs VALUES(236,69,'member','targets','Map of available powerup targets (Self or Enemy).','readonly property var targets: ({');
INSERT INTO defs VALUES(237,69,'member','targetSpecs','Map of supported target specializations (blocks, health, in-game cards).','readonly property var targetSpecs: ({');
INSERT INTO defs VALUES(238,69,'member','operations','Map of supported powerup operations (increase or decrease).','readonly property var operations: ({');
INSERT INTO defs VALUES(239,69,'member','powerupUuid','Unique identifier assigned to the powerup definition.','property string powerupUuid: ""');
INSERT INTO defs VALUES(240,69,'member','powerupTarget','Target alignment this powerup affects (self or enemy).','property string powerupTarget: targets.Self');
INSERT INTO defs VALUES(241,69,'member','powerupTargetSpec','Specific aspect of the target the powerup manipulates.','property string powerupTargetSpec: targetSpecs.PlayerHealth');
INSERT INTO defs VALUES(242,69,'member','powerupTargetSpecData','Additional data describing the target selection such as block coordinates.','property var powerupTargetSpecData: []');
INSERT INTO defs VALUES(243,69,'member','powerupCardHealth','Health provided when the powerup card is deployed.','property int powerupCardHealth: 0');
INSERT INTO defs VALUES(244,69,'member','powerupActualAmount','Magnitude by which the powerup modifies the target.','property int powerupActualAmount: 0');
INSERT INTO defs VALUES(245,69,'member','powerupOperation','Whether the powerup increases or decreases the target attribute.','property string powerupOperation: operations.Increase');
INSERT INTO defs VALUES(246,69,'member','powerupCardEnergyRequired','Computed energy cost derived from other powerup properties.','property int powerupCardEnergyRequired: 0');
INSERT INTO defs VALUES(247,69,'function','target','Validates and assigns the powerup target alignment.','setTarget(target)');
INSERT INTO defs VALUES(248,69,'function','spec, specData','Configures the target specialization and optional supporting data.','setTargetSpec(spec, specData)');
INSERT INTO defs VALUES(249,69,'function','None','Returns the number of block coordinates present in targetSpecData.','targetBlockCount()');
INSERT INTO defs VALUES(250,69,'function','None','Normalizes the magnitude to a non-negative value used for calculations.','effectiveAmount()');
INSERT INTO defs VALUES(251,69,'function','None','Derives the energy cost based on amount, target, and specialization.','calculateEnergyRequired()');
INSERT INTO defs VALUES(252,69,'signal','energyRequired','Emitted whenever the energy calculation produces a new result.','signal energyRecalculated(int energyRequired)');
INSERT INTO defs VALUES(253,69,'function','None','Recomputes the energy cost and emits a notification when it changes.','updateEnergyRequirement()');
INSERT INTO defs VALUES(254,69,'member','powerupName','Display name presented on cards and in catalog listings.','property string powerupName: ""');
INSERT INTO defs VALUES(255,69,'member','powerupIsCustom','Flag indicating whether the powerup originated from player-created content.','property bool powerupIsCustom: false');
INSERT INTO defs VALUES(256,68,'function','None','Returns all known powerups, falling back to seeded defaults when the database is empty.','fetchAllPowerups()');
INSERT INTO defs VALUES(257,68,'function','row','Normalises raw result rows into the PowerupItem-compatible payload shape.','mapRowToPowerup(row)');
INSERT INTO defs VALUES(258,68,'function','None','Provides built-in powerup definitions used when no records exist in storage.','builtinPowerups()');
INSERT INTO defs VALUES(259,58,'member','colorPalette','Alias to the embedded PowerupItem backing this card.','readonly property var colorPalette: ({');
INSERT INTO defs VALUES(260,58,'member','powerupUuid','Powerup identifier mirrored from the backing PowerupItem.','property alias powerupUuid: powerup.powerupUuid');
INSERT INTO defs VALUES(261,58,'member','powerupName','Display name shown on the card.','property alias powerupName: powerup.powerupName');
INSERT INTO defs VALUES(262,58,'member','powerupTarget','Exposed target alignment for binding in delegates.','property alias powerupTarget: powerup.powerupTarget');
INSERT INTO defs VALUES(263,58,'member','powerupTargetSpec','Exposed target specialization for binding in delegates.','property alias powerupTargetSpec: powerup.powerupTargetSpec');
INSERT INTO defs VALUES(264,58,'member','powerupTargetSpecData','Raw target specialization data forwarded to the PowerupItem.','property alias powerupTargetSpecData: powerup.powerupTargetSpecData');
INSERT INTO defs VALUES(265,58,'member','powerupCardHealth','Health granted by the powerup when played.','property alias powerupCardHealth: powerup.powerupCardHealth');
INSERT INTO defs VALUES(266,58,'member','powerupActualAmount','Magnitude of the powerup effect for UI binding.','property alias powerupActualAmount: powerup.powerupActualAmount');
INSERT INTO defs VALUES(267,58,'member','powerupOperation','Increase/decrease operation displayed on the card.','property alias powerupOperation: powerup.powerupOperation');
INSERT INTO defs VALUES(268,58,'member','powerupIsCustom','Flag used to differentiate custom from built-in powerups.','property alias powerupIsCustom: powerup.powerupIsCustom');
INSERT INTO defs VALUES(269,58,'member','powerupCardEnergyRequired','Computed energy requirement surfaced from the PowerupItem.','property alias powerupCardEnergyRequired: powerup.powerupCardEnergyRequired');
INSERT INTO defs VALUES(270,58,'function','record','Convenience setter that copies record fields into the backing PowerupItem.','applyRecord(record)');
INSERT INTO defs VALUES(271,58,'signal','powerupUuid','Emitted when the card is clicked within catalog views.','signal activated(string powerupUuid)');
INSERT INTO defs VALUES(272,70,'member','database','Reference to the PowerupDatabase instance supplying catalogue data.','property alias database: database');
INSERT INTO defs VALUES(273,70,'member','model','Alias exposing the underlying ListModel of powerups.','property alias model: powerupModel');
INSERT INTO defs VALUES(274,70,'function','None','Reloads powerup data from the database into the GridView model.','refresh()');
INSERT INTO defs VALUES(275,70,'signal','record','Emitted when a catalog entry is activated, providing the powerup record.','signal powerupChosen(var record)');
INSERT INTO defs VALUES(276,58,'function','None','Returns a signed string representation of the powerup amount.','formattedAmount()');
INSERT INTO defs VALUES(277,58,'function','row, col','Reports whether a block coordinate is targeted by the powerup.','targetedBlocksContains(row, col)');
INSERT INTO defs VALUES(278,58,'function','None','Derives the highlight color for card-based powerups.','cardColor()');
INSERT INTO defs VALUES(279,67,'member','cardColorOptions','Predefined list of card colors and labels available to the editor UI.','readonly property var cardColorOptions: [');
INSERT INTO defs VALUES(280,68,'function','None','Populates the Powerups table with default records when it is empty.','seedBuiltinsIfNeeded()');
INSERT INTO defs VALUES(281,69,'member','powerupCardColor','Primary color applied to card visuals and block highlighting.','property string powerupCardColor: "blue"');
INSERT INTO defs VALUES(282,69,'function','None','Normalises targetSpecData based on the current target spec.','ensureSpecDataDefaults()');
INSERT INTO defs VALUES(283,58,'member','powerupCardColor','Alias exposing the selected card color for styling and bindings.','property alias powerupCardColor: powerup.powerupCardColor');
INSERT INTO defs VALUES(284,58,'function','None','Resolves the configured card color name to a usable hex value.','cardColorHex()');
INSERT INTO defs VALUES(285,58,'function','None','Returns the neutral color used for non-targeted blocks.','unselectedBlockColor()');
INSERT INTO defs VALUES(286,67,'member','editingActive','Boolean flag indicating whether a powerup is currently loaded for editing.','property bool editingActive: editingPowerup.powerupUuid.length > 0');
INSERT INTO defs VALUES(287,67,'function','list, value','Utility that returns the index of a value inside a model list.','indexForValue(list, value)');
INSERT INTO defs VALUES(288,67,'function','name','Maps a card color name to the associated hex value.','cardColorHex(name)');
INSERT INTO defs VALUES(289,67,'function','items','Clones block coordinate data for safe editing.','cloneBlockArray(items)');
INSERT INTO defs VALUES(290,67,'function','row, col','Checks whether a block coordinate is selected in the editor grid.','isBlockSelected(row, col)');
INSERT INTO defs VALUES(291,67,'function','row, col','Toggles a block selection inside the editor grid.','toggleBlock(row, col)');
INSERT INTO defs VALUES(292,68,'function','None','Generates a unique identifier for newly created powerups.','generatePowerupUuid()');
INSERT INTO defs VALUES(293,68,'function','targetSpec, data','Serialises target-specific data into a storable representation.','serializeTargetSpecDataForStorage(targetSpec, data)');
INSERT INTO defs VALUES(294,68,'function','uuid','Retrieves a single powerup record from the database.','fetchPowerup(uuid)');
INSERT INTO defs VALUES(295,68,'function','initialValues','Creates a new powerup row using optional defaults and returns it.','createPowerup(initialValues)');
INSERT INTO defs VALUES(296,68,'function','powerup','Upserts a powerup record and returns the normalised result.','savePowerup(powerup)');
INSERT INTO defs VALUES(297,68,'function','uuid','Removes a powerup from the database by UUID.','deletePowerup(uuid)');
INSERT INTO defs VALUES(298,67,'function','record','Loads a powerup record into the editing PowerupItem.','applyEditorRecord(record)');
INSERT INTO defs VALUES(299,67,'function','uuid','Fetches a powerup by UUID and applies it to the editor.','loadPowerupFromDatabase(uuid)');
INSERT INTO defs VALUES(300,67,'function','None','Resets the editor to its default empty state.','clearEditor()');
INSERT INTO defs VALUES(301,67,'function','None','Creates a new powerup entry and loads it for editing.','handleNewPowerup()');
INSERT INTO defs VALUES(302,67,'function','None','Constructs a plain object representing the current editor state.','buildPayloadFromEditor()');
INSERT INTO defs VALUES(303,67,'function','None','Persists the current editor state using the database helper.','handleSavePowerup()');
INSERT INTO defs VALUES(304,67,'function','None','Deletes the currently selected powerup via the database helper.','handleDeletePowerup()');
INSERT INTO defs VALUES(305,68,'function','rows','Normalises joined loadout rows into slot-indexed structures.','normalizeLoadoutRows(rows)');
INSERT INTO defs VALUES(306,68,'function','None','Returns the four-slot loadout array, seeding defaults if needed.','fetchLoadout()');
INSERT INTO defs VALUES(307,68,'function','slot, powerupUuid','Assigns a powerup to a specific slot, enforcing uniqueness.','setLoadoutSlot(slot, powerupUuid)');
INSERT INTO defs VALUES(308,68,'function','None','Clears all player loadout selections.','clearLoadout()');
INSERT INTO defs VALUES(309,71,'signal','None','Emitted when the user exits the MatchSetup screen.','signal closeRequested()');
INSERT INTO defs VALUES(310,71,'signal','loadout','Emitted when the player proceeds with the selected loadout.','signal proceedRequested(var loadout)');
INSERT INTO defs VALUES(311,71,'function','None','Loads the persisted loadout from the database into the UI model.','refreshLoadout()');
INSERT INTO defs VALUES(312,71,'function','slot','Opens the catalog overlay targeting the requested slot.','openCatalog(slot)');
INSERT INTO defs VALUES(313,71,'function','None','Hides the catalog overlay and clears the selection.','closeCatalog()');
INSERT INTO defs VALUES(314,71,'function','slot, powerupUuid','Persists a powerup selection for a specific slot and refreshes the loadout.','assignPowerupToSlot(slot, powerupUuid)');
INSERT INTO defs VALUES(315,71,'function','record','Processes a catalog selection and updates the chosen slot.','handlePowerupChosen(record)');
INSERT INTO defs VALUES(317,71,'member','catalogVisible','Controls visibility of the powerup catalog overlay.','property bool catalogVisible: false');
INSERT INTO defs VALUES(318,71,'member','selectedSlot','Tracks which slot index is actively being edited.','property int selectedSlot: -1');
INSERT INTO defs VALUES(319,71,'function','value','Parses serialized target-spec data into runtime structures.','deserializeSpecData(value)');
INSERT INTO defs VALUES(320,70,'function','value','Helper that converts serialized spec data for PowerupCatalog delegates.','deserializeSpecData(value)');
INSERT INTO defs VALUES(321,71,'function','slot, powerupUuid','Persists powerup selections to the loadout table.','assignPowerupToSlot(slot, powerupUuid)');
INSERT INTO defs VALUES(322,71,'function','record','Handles catalog selections and updates the matching slot.','handlePowerupChosen(record)');
INSERT INTO defs VALUES(323,71,'member','loadoutData','Array of persisted loadout entries fetched from the database.','property var loadoutData: []');
INSERT INTO defs VALUES(324,71,'member','slots','Collection of slot objects created at run time for player loadouts.','property var slots: []');
INSERT INTO defs VALUES(325,71,'member','slotCount','Read-only constant defining the number of selectable powerup slots (4).','readonly property var slotCount: 4');
INSERT INTO defs VALUES(326,70,'function','None','Reloads catalog entries from the database into the GridView model.','refresh()');
INSERT INTO defs VALUES(327,70,'function','value','Parses serialized spec-data strings into runtime values.','deserializeSpecData(value)');
INSERT INTO defs VALUES(330,67,'function','value','Parses serialized target-spec data when loading powerups into the editor.','deserializeSpecData(value)');
INSERT INTO defs VALUES(331,71,'signal','slot, record','Emitted when a slot should update its card with new powerup data.','signal updatedSlotData(int slot, var record)');
INSERT INTO defs VALUES(333,71,'function','value','Parses serialized loadout spec data to runtime values.','deserializeSpecData(value)');
INSERT INTO defs VALUES(334,71,'function','record','Processes catalog selection, updates model, emits slot update, and persists choice.','handlePowerupChosen(record)');
INSERT INTO defs VALUES(336,71,'function','None','Constructs the four slot areas dynamically and stores them in the slots array.','createSlots()');
INSERT INTO defs VALUES(337,71,'function','None','Destroys any existing slot area instances and clears the slots array.','destroySlots()');
INSERT INTO defs VALUES(338,71,'component','slotAreaComponent','Reusable Item definition representing a single powerup slot with embedded PowerupCard.','Component { id: slotAreaComponent }');
INSERT INTO defs VALUES(340,51,'function','row, column','Returns the UI.Block entry stored at the specified grid coordinates or null when empty.','getBlockEntryAt(row, column)');
INSERT INTO defs VALUES(344,51,'function','None','Populates missing grid cells by creating new blocks and inserting them into the matrix.','fillGrid()');
INSERT INTO defs VALUES(345,51,'function','row, column','Returns the GameDragItem wrapper placed at the requested grid cell.','getBlockWrapper(row, column)');
INSERT INTO defs VALUES(346,46,'member','launchIndex','Item colorRing renders 15 rectangles that orbit in a circular path with random colors.','property int launchIndex: 0');
INSERT INTO defs VALUES(347,51,'member','blockSequence','Counter reserved for generating unique block IDs when fill logic is restored.','property int blockSequence: 0');
INSERT INTO defs VALUES(355,53,'member','launchComponent','Grid row index metadata reserved for future gravity handling.','property Component launchComponent: blockLaunchComponent');
INSERT INTO defs VALUES(356,53,'member','idleComponent','Grid column index metadata reserved for future gravity handling.','property Component idleComponent: blockIdleComponent');
INSERT INTO defs VALUES(357,53,'member','explodeComponent','Maximum row count placeholder the block can use when repositioning.','property Component explodeComponent: blockExplodeComponent');
INSERT INTO defs VALUES(358,53,'member','lowerBlockRefs','Reserved array for lower block references (currently unused).','property var lowerBlockRefs: []');
INSERT INTO defs VALUES(360,51,'member','currentState','Current BattleGrid lifecycle label consumed by the simple switch-based state machine.','property string currentState: "init"');
INSERT INTO defs VALUES(365,51,'member','blockPalette','Tracks whether the queue is actively processing events.','readonly property var blockPalette: ["red", "blue", "green", "yellow"]');
INSERT INTO defs VALUES(366,51,'member','blockIdPrefix','Reference to the queue item currently being processed.','readonly property string blockIdPrefix: "grid_block"');
INSERT INTO defs VALUES(395,67,'member','targetOptions','List of selectable powerup targets (Self or Enemy).','readonly property var targetOptions: [');
INSERT INTO defs VALUES(396,67,'member','targetSpecOptions','List of selectable target specializations such as PlayerHealth or Blocks.','readonly property var targetSpecOptions: [');
INSERT INTO defs VALUES(397,67,'member','operationOptions','List of selectable powerup operations (increase or decrease).','readonly property var operationOptions: [');
INSERT INTO defs VALUES(398,72,'member','contextObject','Exposes the bound context object already stored by the machine through the binding helper.','property alias contextObject: binding.contextObject');
INSERT INTO defs VALUES(399,72,'member','contextStateProperty','Reveals the name of the property on the bound context object that holds the active state.','property alias contextStateProperty: binding.stateProperty');
INSERT INTO defs VALUES(400,72,'signal','previousState, nextState','Emitted whenever a transition predicate promotes a new state, providing the source and destination.','signal transitionToNewState(string previousState, string nextState)');
INSERT INTO defs VALUES(401,72,'function','contextInstance, statePropertyName','Connects the machine to a context object and the property containing its current state.','function bindContext(contextInstance, statePropertyName)');
INSERT INTO defs VALUES(402,72,'function','stateName','Declares a state within the internal registry so that transitions can reference it safely.','function addState(stateName)');
INSERT INTO defs VALUES(403,72,'function','startState, evaluationHandler, destinationState, options','Registers a predicate that can promote from startState to destinationState, optionally tagging metadata.','function addStateTransition(startState, evaluationHandler, destinationState, options)');
INSERT INTO defs VALUES(404,72,'function','startState, transitionId','Removes a previously registered transition and disposes of its helper object.','function removeStateTransition(startState, transitionId)');
INSERT INTO defs VALUES(405,72,'function','startState','Provides a metadata-rich description of transitions originating from the requested state.','function listStateTransitions(startState)');
INSERT INTO defs VALUES(406,72,'function','stateName','Evaluates registered transitions for the given or current state and emits transition signals when matches succeed.','function checkTransitions(stateName)');
INSERT INTO defs VALUES(407,72,'signal','previousState, nextState, transitionId, metadata','Emitted alongside transitionToNewState, exposing the transition identifier and any metadata payload.','signal transitionEvaluated(string previousState, string nextState, int transitionId, var metadata)');
INSERT INTO defs VALUES(408,72,'function','None','Returns the state recorded on the bound context without mutating any bookkeeping.','function currentState()');
INSERT INTO defs VALUES(409,72,'function','stateName','Indicates whether the registry already knows about the provided state name.','function hasState(stateName)');
INSERT INTO defs VALUES(410,72,'function','stateNames','Bulk helper that defines each state name present in the provided iterable.','function addStates(stateNames)');
INSERT INTO defs VALUES(411,72,'function','startState','Destroys all registered transitions originating from the supplied state.','function clearStateTransitions(startState)');
INSERT INTO defs VALUES(412,72,'function','None','Clears the registry and binding so the machine can be rebound or repurposed.','function reset()');
INSERT INTO defs VALUES(413,73,'member','battleGrid','Reference to the BattleGrid instance that should be coordinated by the machine.','property var battleGrid: null');
INSERT INTO defs VALUES(414,73,'member','autoAttach','Controls whether the machine automatically binds to battleGrid when instantiated.','property bool autoAttach: true');
INSERT INTO defs VALUES(415,73,'function','None','Derives the list of states that should be registered, ensuring required initialization states are present.','function collectManagedStates()');
INSERT INTO defs VALUES(416,73,'function','None','Clears transient bookkeeping so initialization transitions can run again.','function resetRuntimeFlags()');
INSERT INTO defs VALUES(417,73,'function','None','Creates or retargets the Connections helper that listens to BattleGrid events.','function ensureConnections()');
INSERT INTO defs VALUES(418,73,'function','None','Unhooks the machine from the current grid, cleaning up connections and flags.','function detachGrid()');
INSERT INTO defs VALUES(419,73,'function','None','Registers the initialization transition set on the reusable engine state machine.','function registerDefaultTransitions()');
INSERT INTO defs VALUES(420,73,'function','newGrid','Binds the machine to a BattleGrid, resets state, and queues initial bootstrap events.','function attachGrid(newGrid)');
INSERT INTO defs VALUES(421,73,'function','contextInstance','Predicate used by the engine machine to determine when to leave the init state.','function evaluateInitializationRequest(contextInstance)');
INSERT INTO defs VALUES(422,73,'function','contextInstance','Predicate that confirms the initialization flow has produced a payload before switching to initialized.','function evaluateInitializationCompletion(contextInstance)');
INSERT INTO defs VALUES(423,73,'function','None','Asks the underlying engine state machine to re-run transition predicates once prerequisites are met.','function evaluateTransitions()');
INSERT INTO defs VALUES(424,73,'function','None','Schedules the init lifecycle through enqueueManagedState with bootstrap metadata.','function enqueueInitialStateBootstrap()');
INSERT INTO defs VALUES(425,73,'function','None','Convenience wrapper that reuses enqueueManagedState for initialization-triggered init lifecycle runs.','function enqueueInitializationTransition()');
INSERT INTO defs VALUES(426,73,'function','payload','Queues the init lifecycle with a precomputed summary so downstream handlers learn initialization payloads.','function enqueueInitializedState(payload)');
INSERT INTO defs VALUES(427,73,'function','previousState, nextState','Responds to base state transitions by delegating to enqueueManagedState when the request was external.','function handleTransition(previousState, nextState)');
INSERT INTO defs VALUES(428,73,'function','queueItem, completionContext','Routes queue completion payloads through handleCompletedState for chained lifecycle evaluation.','function handleQueueItemCompletion(queueItem, completionContext)');
INSERT INTO defs VALUES(429,73,'function','fromState, toState, metadata','Resets guards after state changes and schedules additional evaluations as needed.','function handleStateTransitionFinished(fromState, toState, metadata)');
INSERT INTO defs VALUES(436,73,'function','source','Creates a shallow copy of the provided object so lifecycle metadata can be merged safely.','cloneSimple(source)');
INSERT INTO defs VALUES(437,73,'function','baseState, baseOptions, overrides','Merges default and override lifecycle handlers while stamping metadata about the owning state.','extendLifecycleOptions(baseState, baseOptions, overrides)');
INSERT INTO defs VALUES(438,73,'function','None','Builds the default lifecycle handler map for init, fill, match, launch, and check_turn transitions.','createDefaultStateActions()');
INSERT INTO defs VALUES(439,73,'function','stateName, overrideOptions','Requests the grid to enqueue the lifecycle for the referenced state while suppressing recursive transition handling.','enqueueManagedState(stateName, overrideOptions)');
INSERT INTO defs VALUES(440,73,'function','completionContext','Interprets queue completion payloads to queue follow-up states like fill, match, launch, or check_turn.','handleCompletedState(completionContext)');
INSERT INTO defs VALUES(441,51,'property','launchDirection','Tracks the direction blocks should launch toward; presently unused placeholder.','property string launchDirection: down');
INSERT INTO defs VALUES(442,51,'member','previousState','Tracks the most recent state so transitions can inspect where the grid came from.','property string previousState: ');
INSERT INTO defs VALUES(443,51,'function','newState, oldState','Observes external currentState assignments and enqueues the corresponding lifecycle when a base state is requested.','handleStateChange(newState, oldState)');
INSERT INTO defs VALUES(444,51,'function','None','Scans the grid for horizontal and vertical runs of three or more like-colored blocks, tagging only those as matched and returning their identifiers.','markMatchedBlocks()');
INSERT INTO defs VALUES(445,51,'function','None','Switches matched block entries into launch state and returns the list of launched identifiers.','launchMatchedBlocks()');
INSERT INTO defs VALUES(446,51,'function','None','Slides existing wrappers downward within each column to eliminate gaps.','compactColumns()');
INSERT INTO defs VALUES(447,51,'function','None','Calls fillGrid to spawn new blocks for any vacated cells after compaction.','spawnMissingBlocks()');
INSERT INTO defs VALUES(448,51,'function','None','Invokes fillGrid as the fill stage handler to repopulate empty slots.','fillMissingBlocks()');
INSERT INTO defs VALUES(449,51,'function','stateName','Internal helper that flips currentState while optionally suppressing queue reentry guards.','setGridStateInternal(stateName, suppressHandler)');
INSERT INTO defs VALUES(455,51,'property','','Computed grid height used for layout calculations and spawn offsets.','readonly property int gridHeight: (gridRows * cellH) + Math.max(0, gridRows - 1) * gapY');
INSERT INTO defs VALUES(456,51,'property','blockMatrix','2D array that tracks the GameDragItem wrapper assigned to each grid coordinate.','property var blockMatrix: []');
INSERT INTO defs VALUES(457,51,'function','','Initialises or resizes the internal block matrix to match the current grid dimensions.','ensureMatrix()');
INSERT INTO defs VALUES(458,51,'function','row, column','Returns the on-screen x/y coordinate for the requested grid cell.','cellPosition(row, column)');
INSERT INTO defs VALUES(459,51,'function','row, column, wrapper','Stores the provided wrapper at the requested grid cell and synchronises its position metadata.','setWrapperAt(row, column, wrapper)');
INSERT INTO defs VALUES(460,51,'function','row, column','Clears the matrix entry at the requested coordinate.','clearWrapperAt(row, column)');
INSERT INTO defs VALUES(461,51,'function','wrapper, targetRow, targetColumn','Repositions an existing wrapper to a new grid coordinate and updates the matrix.','moveWrapper(wrapper, targetRow, targetColumn)');
INSERT INTO defs VALUES(462,51,'member','property bool suppressStateHandler','Guard flag used to ignore onCurrentStateChanged while the queue adjusts progressive/completed forms.','property bool suppressStateHandler: false');
INSERT INTO defs VALUES(463,51,'member','stateList','Triplet-ordered list of base/progressive/completed states driving the lifecycle queue.','readonly property var stateList');
INSERT INTO defs VALUES(464,51,'member','battleQueue','FIFO collection of pending lifecycle events waiting to run.','property var battleQueue: []');
INSERT INTO defs VALUES(465,51,'member','queueProcessing','True while a lifecycle event is currently executing.','property bool queueProcessing: false');
INSERT INTO defs VALUES(466,51,'member','activeQueueItem','Reference to the lifecycle descriptor currently executing.','property var activeQueueItem: null');
INSERT INTO defs VALUES(467,51,'function','value','Normalizes incoming state tokens to lower-case strings for lookup in the triplet list.','normalizeStateName(value)');
INSERT INTO defs VALUES(468,51,'function','stateValue','Returns the base/progressive/completed trio for the provided state token.','stateFormsFor(stateValue)');
INSERT INTO defs VALUES(469,51,'function','baseState','Public entry point that normalizes a base state and sets currentState so the queue can enqueue the lifecycle.','requestState(baseState)');
INSERT INTO defs VALUES(470,51,'function','baseState','Queues the lifecycle event for the requested base state unless it is already pending or active.','enqueueLifecycleForState(baseState)');
INSERT INTO defs VALUES(471,51,'function','baseState','Checks the queue and current item to avoid enqueuing duplicate lifecycles.','isLifecycleQueued(baseState)');
INSERT INTO defs VALUES(472,51,'function','eventObject','Pushes a lifecycle descriptor into the FIFO queue and kicks processing.','enqueueBattleEvent(eventObject)');
INSERT INTO defs VALUES(473,51,'function','None','Executes the next queued lifecycle event, honoring promise results before proceeding.','processNextQueueItem()');
INSERT INTO defs VALUES(474,51,'function','value','Detects whether the lifecycle main returned a promise so the queue can await it.','isPromiseLike(value)');
INSERT INTO defs VALUES(475,51,'function','forms, context','Routes lifecycle completions to the next state request based on run results (matches, fills, launches).','handleLifecycleCompleted(forms, context)');
INSERT INTO defs VALUES(476,51,'function','wrapper','Returns the current row/column occupied by the provided wrapper by scanning the block matrix.','findWrapperPosition(wrapper)');
INSERT INTO defs VALUES(477,74,'function','None','Prints a concise help screen covering global options and subcommands.','usage()');
INSERT INTO defs VALUES(478,74,'function','message','Writes an error prefixed with the script name and exits with failure.','fatal(message)');
INSERT INTO defs VALUES(479,74,'function','message','Emits debug logging when verbose mode is enabled without affecting exit status.','debug(message)');
INSERT INTO defs VALUES(480,74,'function','None','Verifies that the configured SQLite database path exists before running commands.','ensure_db()');
INSERT INTO defs VALUES(481,74,'function','value','Escapes single quotes and wraps a value for safe inclusion in literal SQL.','sql_quote(value)');
INSERT INTO defs VALUES(482,74,'function','value','Ensures LIKE filter inputs gain wildcard markers unless explicitly supplied.','wrap_like(value)');
INSERT INTO defs VALUES(483,74,'function','name','Validates bare SQLite identifiers so generated SQL never references unintended columns.','sanitize_identifier(name)');
INSERT INTO defs VALUES(484,74,'function','ref','Validates dotted table.column references for dynamic filtering additions.','sanitize_column_ref(ref)');
INSERT INTO defs VALUES(485,74,'function','None','Detects whether sqlite3 supports .parameter bindings and remembers the result.','init_param_mode()');
INSERT INTO defs VALUES(486,74,'function','delimiter, values...','Joins non-empty strings with the requested delimiter for SQL assembly.','join_with(delimiter, values...)');
INSERT INTO defs VALUES(487,74,'function','term, columns...','Constructs a case-insensitive LIKE clause that spans several columns.','build_search_clause(term, columns...)');
INSERT INTO defs VALUES(488,74,'function','args...','Implements the flexible query subcommand including fuzzy search and table-aware filters.','command_query(args...)');
INSERT INTO defs VALUES(489,74,'function','args...','Convenience wrapper that expands natural text terms into query filters.','command_search(args...)');
INSERT INTO defs VALUES(490,74,'function','names_ref, values_ref, pairs...','Separates key=value pairs into aligned arrays for insert and update helpers.','parse_assignments(names_ref, values_ref, pairs...)');
INSERT INTO defs VALUES(491,74,'function','table, assignments...','Adds rows to any WHEEL.db table while echoing the inserted row id.','command_insert(table, assignments...)');
INSERT INTO defs VALUES(492,74,'function','table, options...','Updates rows in a table with --set/-–where handling and change counts.','command_update(table, options...)');
INSERT INTO defs VALUES(493,74,'function','table, options...','Removes rows by primary id or custom conditions while reporting deletions.','command_delete(table, options...)');
INSERT INTO defs VALUES(494,74,'function','table, options...','Shows table schema details and optionally previews matching rows.','command_describe(table, options...)');
INSERT INTO defs VALUES(495,74,'function','change_id','Summarises a change id with related files, defs, and todo entries for planning.','command_plan(change_id)');
INSERT INTO defs VALUES(496,74,'function','sql...','Runs arbitrary SQL snippets or drops into interactive sqlite3 when no SQL is given.','command_raw(sql...)');
INSERT INTO defs VALUES(497,74,'function','argv...','Parses global switches, resolves subcommands, and routes execution accordingly.','main(argv...)');
CREATE TABLE refs (
  id INTEGER PRIMARY KEY,
  def_id INTEGER NOT NULL,
  reference_def_id INTEGER NOT NULL,
  FOREIGN KEY(def_id) REFERENCES defs(id),
  FOREIGN KEY(reference_def_id) REFERENCES defs(id)
);
CREATE TABLE changes (
  id INTEGER PRIMARY KEY,
  title TEXT NOT NULL,
  context TEXT,
  status TEXT NOT NULL
);
INSERT INTO changes VALUES(1,'Align process with AGENTS instructions','Ensure WHEEL.db exists, populated, and change tracking uses the database.\nCreate required change/todo entries for current work.','Complete');
INSERT INTO changes VALUES(2,'Add Powerup editor scene','Need a dedicated PowerupEditor view reachable from the main menu.\nHook up Powerup Editor button and include file in build.','Complete');
INSERT INTO changes VALUES(3,'Introduce Powerup database interface','Need a QML data access wrapper for powerup storage via LocalStorage.\nMust add placeholder implementation and include it in the build.','Complete');
INSERT INTO changes VALUES(4,'Add PowerupItem data model','Need data-only PowerupItem component with computed energy cost for powerup cards.\nMust register new file with build and expose properties/functions for future use.','Complete');
INSERT INTO changes VALUES(5,'Implement Powerup catalog UI','Need a catalog that lists powerups using PowerupDatabase.\nPowerupCard must expose PowerupItem data and display entries.\nAdd differentiation between built-in and custom powerups.','Complete');
INSERT INTO changes VALUES(6,'Enhance powerup catalog visuals and integration','Catalog needs to serve PowerupEditor with real data and richer card visuals.\nReplace placeholder fallback data, wire catalog into editor, and show iconography tied to target specs.','Complete');
INSERT INTO changes VALUES(7,'Persist powerups in SQL schema','Need actual tables instead of placeholder fallback data.\nEnsure built-in powerups seed the database and fetchAllPowerups reads from SQL.','Complete');
INSERT INTO changes VALUES(8,'Powerup editor form and color workflow','Need editable powerup form with block selector and color-aware cards.\nAdd powerupCardColor property, card visuals, and integrate the catalog with editing.','Complete');
INSERT INTO changes VALUES(9,'Persist powerup editor CRUD','Powerup editor needs new/save/delete workflow with database helpers.\nAdd PowerupDatabase CRUD helpers, integrate catalog refresh, and provide UI actions in editor.','Complete');
INSERT INTO changes VALUES(10,'Fix PowerupItem naming for QML compliance','Uppercase property identifiers in PowerupItem.qml cause QML compile errors.\nRename read-only maps to lowercase and update references.','Complete');
INSERT INTO changes VALUES(11,'Implement MatchSetup powerup selection screen','Need a pre-match UI to choose four powerup cards with catalog picker.\nPersist chosen powerups in PowerupDatabase and ensure selections reload on open.','Complete');
INSERT INTO changes VALUES(12,'Implement MatchSetup powerup selection screen','Need a pre-match UI to choose four powerup cards with catalog picker.\nPersist chosen powerups in PowerupDatabase and ensure selections reload on open.','Complete');
INSERT INTO changes VALUES(13,'BattleGrid block drop from top','Blocks should spawn above the grid and animate into position instead of appearing in-place. Requires BattleGrid delegate adjustments and factory spawn tweaks.','Complete');
INSERT INTO changes VALUES(14,'Implement BattleGrid entry lookup','BattleGrid getBlockEntryAt should return the block entry item for a given grid coordinate.','Complete');
INSERT INTO changes VALUES(15,'Preserve column order on BattleGrid refill','When refilling BattleGrid after removals the model should compact per-column so blocks stay within their column.','Complete');
INSERT INTO changes VALUES(16,'BattleGrid directional placeholder compaction','Convert BattleGrid refill to use placeholder entries that bubble per-column based on fill direction.','Complete');
INSERT INTO changes VALUES(17,'Add DebugScene color ring','Add circle of colored rectangles to debug scene for visualization.','Complete');
INSERT INTO changes VALUES(18,'Animate DebugScene color ring','Rotate color ring so rectangles orbit without tilting.','Complete');
INSERT INTO changes VALUES(19,'BattleGrid destruction cascade','Add dependency wiring so blocks drop when lower blocks are destroyed and prune destroyed entries.','Complete');
INSERT INTO changes VALUES(20,'Resync metadata after manual revert','User reverted prior battle grid automation; update WHEEL listings to match current code.','Complete');
INSERT INTO changes VALUES(21,'Add BattleGrid state machine scaffold','Provide state tracking API and signals in BattleGrid for upcoming queue integration.','Complete');
INSERT INTO changes VALUES(22,'Refactor state machines for battle grid','Rename and refactor GameStateMachine integration','Complete');
INSERT INTO changes VALUES(23,'BattleGrid progressive state workflow','Implement queued progressive/past state handling and extend state machine orchestration.','InProgress');
INSERT INTO changes VALUES(24,'BattleGrid compact lifecycle','Wire compact state into queue processing so blocks collapse toward launch direction.','Complete');
INSERT INTO changes VALUES(25,'BattleGrid queued state lifecycles','Recreate queue-driven base/progressive/completed state handling to avoid recursion and honor animations.','InProgress');
INSERT INTO changes VALUES(26,'Enhance wheel.sh CLI','Add comprehensive CRUD operations and flexible queries for WHEEL.db automation','InProgress');
CREATE TABLE change_files (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  file_id INTEGER NOT NULL,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(file_id) REFERENCES files(id)
);
INSERT INTO change_files VALUES(1,1,33);
INSERT INTO change_files VALUES(2,2,34);
INSERT INTO change_files VALUES(3,2,66);
INSERT INTO change_files VALUES(4,2,67);
INSERT INTO change_files VALUES(5,3,66);
INSERT INTO change_files VALUES(6,3,68);
INSERT INTO change_files VALUES(7,4,66);
INSERT INTO change_files VALUES(8,4,69);
INSERT INTO change_files VALUES(9,5,66);
INSERT INTO change_files VALUES(10,5,68);
INSERT INTO change_files VALUES(11,5,69);
INSERT INTO change_files VALUES(12,5,58);
INSERT INTO change_files VALUES(13,5,70);
INSERT INTO change_files VALUES(14,6,68);
INSERT INTO change_files VALUES(15,6,69);
INSERT INTO change_files VALUES(16,6,58);
INSERT INTO change_files VALUES(17,6,70);
INSERT INTO change_files VALUES(18,6,67);
INSERT INTO change_files VALUES(19,7,68);
INSERT INTO change_files VALUES(20,8,69);
INSERT INTO change_files VALUES(21,8,58);
INSERT INTO change_files VALUES(22,8,70);
INSERT INTO change_files VALUES(23,8,68);
INSERT INTO change_files VALUES(24,8,67);
INSERT INTO change_files VALUES(25,9,68);
INSERT INTO change_files VALUES(26,9,70);
INSERT INTO change_files VALUES(27,9,67);
INSERT INTO change_files VALUES(28,10,69);
INSERT INTO change_files VALUES(29,10,58);
INSERT INTO change_files VALUES(30,10,67);
INSERT INTO change_files VALUES(31,12,66);
INSERT INTO change_files VALUES(32,12,68);
INSERT INTO change_files VALUES(33,12,71);
INSERT INTO change_files VALUES(34,13,51);
INSERT INTO change_files VALUES(35,13,47);
INSERT INTO change_files VALUES(36,14,51);
INSERT INTO change_files VALUES(37,15,51);
INSERT INTO change_files VALUES(38,16,51);
INSERT INTO change_files VALUES(39,17,46);
INSERT INTO change_files VALUES(40,18,46);
INSERT INTO change_files VALUES(41,19,51);
INSERT INTO change_files VALUES(42,19,53);
INSERT INTO change_files VALUES(43,20,33);
INSERT INTO change_files VALUES(44,20,51);
INSERT INTO change_files VALUES(45,20,53);
INSERT INTO change_files VALUES(46,21,51);
INSERT INTO change_files VALUES(47,22,72);
INSERT INTO change_files VALUES(48,22,51);
INSERT INTO change_files VALUES(49,22,73);
INSERT INTO change_files VALUES(50,23,51);
INSERT INTO change_files VALUES(51,23,73);
INSERT INTO change_files VALUES(52,24,51);
INSERT INTO change_files VALUES(53,25,51);
INSERT INTO change_files VALUES(54,26,74);
CREATE TABLE change_defs (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  file_id INTEGER NOT NULL,
  def_id INTEGER,
  description TEXT,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(file_id) REFERENCES files(id),
  FOREIGN KEY(def_id) REFERENCES defs(id)
);
INSERT INTO change_defs VALUES(1,1,33,NULL,'Create and populate WHEEL.db tables with project metadata per AGENTS instructions.');
INSERT INTO change_defs VALUES(2,2,34,NULL,'Handle powerupEditorChosen by showing a PowerupEditor scene.');
INSERT INTO change_defs VALUES(3,2,66,NULL,'Add game/PowerupEditor.qml to the QML module inputs.');
INSERT INTO change_defs VALUES(4,2,67,NULL,'Define PowerupEditor scene QML skeleton for editing powerups.');
INSERT INTO change_defs VALUES(5,3,66,NULL,'Register game/data/PowerupDatabase.qml with the QML module in CMake.');
INSERT INTO change_defs VALUES(6,3,68,NULL,'Stub out PowerupDatabase interface exposing LocalStorage helpers.');
INSERT INTO change_defs VALUES(7,4,66,NULL,'Register game/data/PowerupItem.qml in the qml module.');
INSERT INTO change_defs VALUES(8,4,69,NULL,'Implement PowerupItem with target data properties and energy calculation.');
INSERT INTO change_defs VALUES(9,5,66,NULL,'Add PowerupCatalog component to the QML module list.');
INSERT INTO change_defs VALUES(10,5,68,NULL,'Expose helper functions to fetch powerups and provide built-in fallback data.');
INSERT INTO change_defs VALUES(11,5,69,NULL,'Extend PowerupItem with name, custom flag, and energy recomputation helpers.');
INSERT INTO change_defs VALUES(12,5,58,NULL,'Refactor PowerupCard to house a PowerupItem and surface UI bindings.');
INSERT INTO change_defs VALUES(13,5,70,NULL,'Implement PowerupCatalog view that loads data from PowerupDatabase into a GridView.');
INSERT INTO change_defs VALUES(14,6,68,NULL,'Replace placeholder fallback records with curated built-in powerups and resilient loading.');
INSERT INTO change_defs VALUES(15,6,69,NULL,'Add support data needed for icon rendering (no new functions expected).');
INSERT INTO change_defs VALUES(16,6,58,NULL,'Update PowerupCard visuals to render icons and condensed stats.');
INSERT INTO change_defs VALUES(17,6,70,NULL,'Adjust catalog delegate to align with new card layout.');
INSERT INTO change_defs VALUES(18,6,67,NULL,'Embed the powerup catalog inside PowerupEditor to list available powerups.');
INSERT INTO change_defs VALUES(19,7,68,NULL,'Create SQL schema for powerups and seed built-in definitions when database is empty.');
INSERT INTO change_defs VALUES(20,8,69,NULL,'Add powerupCardColor property and target-spec data normalization helpers.');
INSERT INTO change_defs VALUES(21,8,58,NULL,'Refresh PowerupCard visuals with color palette and iconography.');
INSERT INTO change_defs VALUES(22,8,70,NULL,'Include card color data in catalog records.');
INSERT INTO change_defs VALUES(23,8,68,NULL,'Persist card colors in the Powerups table and seed data.');
INSERT INTO change_defs VALUES(24,8,67,NULL,'Embed catalog-driven edit form with block selector and control bindings.');
INSERT INTO change_defs VALUES(25,9,68,NULL,'Add CRUD helpers (create, save, delete, fetch) for powerups and shared UUID utility.');
INSERT INTO change_defs VALUES(26,9,70,NULL,'Expose database refresh so catalog can reload after CRUD operations.');
INSERT INTO change_defs VALUES(27,9,67,NULL,'Rework editor layout with catalog + form, add new/save/delete buttons and wire to database.');
INSERT INTO change_defs VALUES(28,10,69,NULL,'Rename read-only enums to lowercase identifiers in PowerupItem.');
INSERT INTO change_defs VALUES(29,10,58,NULL,'Update card bindings to use new lowercase PowerupItem enums.');
INSERT INTO change_defs VALUES(30,10,67,NULL,'Align editor references with renamed PowerupItem enum properties.');
INSERT INTO change_defs VALUES(31,12,68,NULL,'Add loadout schema and CRUD helpers for player-selected powerups.');
INSERT INTO change_defs VALUES(32,12,66,NULL,'Register MatchSetup QML screen in the build.');
INSERT INTO change_defs VALUES(33,12,71,NULL,'Implement MatchSetup UI with catalog overlay and slot management.');
INSERT INTO change_defs VALUES(34,13,51,NULL,'Compute drop height and initialize new block instances above the grid before animation.');
INSERT INTO change_defs VALUES(35,13,47,95,'Adjust Factory.createBlock to support spawning blocks above desired position and finalize after drop.');
INSERT INTO change_defs VALUES(36,14,51,340,'Add implementation for getBlockEntryAt(row, column) to return the entry item at given grid location.');
INSERT INTO change_defs VALUES(37,15,51,344,'Refactor fillGrid to fill per-column without reflow.');
INSERT INTO change_defs VALUES(38,15,51,NULL,'Add helper(s) to remove blocks and compact columns when entries are destroyed.');
INSERT INTO change_defs VALUES(39,15,51,NULL,'Add lookup helper to find block index by uid.');
INSERT INTO change_defs VALUES(40,15,51,NULL,'Ensure existing model entries carry uid/column/row metadata before refills.');
INSERT INTO change_defs VALUES(41,15,51,NULL,'Introduce counter to assign persistent block uids.');
INSERT INTO change_defs VALUES(42,15,51,NULL,'Track next color slot to keep refill hues rotating.');
INSERT INTO change_defs VALUES(43,16,51,NULL,'Add fillDirection/fillColors configuration for placeholder compaction.');
INSERT INTO change_defs VALUES(44,16,51,NULL,'Introduce compactColumn/refillColumn helpers to bubble placeholders per column.');
INSERT INTO change_defs VALUES(45,16,51,NULL,'Update handleBlockDestroyed to mark placeholder entries instead of removing them.');
INSERT INTO change_defs VALUES(46,16,51,344,'Refresh fillGrid/ensureBlockMetadata to seed placeholders and directional refills.');
INSERT INTO change_defs VALUES(47,16,51,NULL,'Expose fillColors array for configurable refill palette.');
INSERT INTO change_defs VALUES(48,16,51,NULL,'Provide placeholder fill color override for invisible slots.');
INSERT INTO change_defs VALUES(49,16,51,NULL,'Expose totalCells computed property for grid sizing.');
INSERT INTO change_defs VALUES(50,16,51,NULL,'Implement refillColumn to convert placeholders after compaction.');
INSERT INTO change_defs VALUES(51,16,51,NULL,'Expose placeholderColor helper for delegate bindings.');
INSERT INTO change_defs VALUES(52,16,51,NULL,'Add nextFillColor helper to step through grid refill palette.');
INSERT INTO change_defs VALUES(53,16,51,NULL,'Expand ensureBlockMetadata to seed placeholder entries.');
INSERT INTO change_defs VALUES(54,17,46,346,'Add Item colorRing with 15 rectangles arranged in a circle for debug visuals.');
INSERT INTO change_defs VALUES(55,18,46,346,'Animate colorRing so rectangles orbit without rotating individually.');
INSERT INTO change_defs VALUES(56,19,51,344,'Extend fillGrid to assign IDs, metadata, and kick off dependency wiring.');
INSERT INTO change_defs VALUES(57,19,51,348,'Add attachBlockHandlers to connect stacked blocks and sync model state.');
INSERT INTO change_defs VALUES(58,19,51,349,'Handle row changes by moving model entries and refreshing handlers.');
INSERT INTO change_defs VALUES(59,19,51,350,'Collect and remove destroyed blocks after cascading updates.');
INSERT INTO change_defs VALUES(60,19,51,351,'Centralize block removal for model and scene cleanup.');
INSERT INTO change_defs VALUES(61,19,53,359,'Emit rowIndexChanged so the grid can reposition blocks on falls.');
INSERT INTO change_defs VALUES(62,19,53,360,'Allow blocks to register lower neighbors for destruction monitoring.');
INSERT INTO change_defs VALUES(63,19,53,361,'Drop a block to the next row when its observed neighbor becomes destroyed.');
INSERT INTO change_defs VALUES(64,19,53,362,'Flag blocks once their row change handler has been wired.');
INSERT INTO change_defs VALUES(65,19,53,363,'Guard against reattaching block destruction monitors multiple times.');
INSERT INTO change_defs VALUES(66,20,51,344,'Update fillGrid description to reflect placeholder state after revert.');
INSERT INTO change_defs VALUES(67,20,51,347,'Revise blockSequence notes to indicate use as reserved counter.');
INSERT INTO change_defs VALUES(68,20,51,NULL,'Remove stale attachBlockHandlers entry (function no longer exists).');
INSERT INTO change_defs VALUES(69,20,51,NULL,'Remove stale handleBlockRowChanged entry (function no longer exists).');
INSERT INTO change_defs VALUES(70,20,51,NULL,'Remove stale destroyDestroyedBlocks entry (function no longer exists).');
INSERT INTO change_defs VALUES(71,20,51,NULL,'Remove stale removeBlockById entry (function no longer exists).');
INSERT INTO change_defs VALUES(72,20,53,355,'Adjust description of row metadata to note placeholder usage.');
INSERT INTO change_defs VALUES(73,20,53,356,'Adjust description of column metadata to match current code.');
INSERT INTO change_defs VALUES(74,20,53,357,'Clarify maxRows property usage after revert.');
INSERT INTO change_defs VALUES(75,20,53,358,'Describe lowerBlockRefs as currently unused placeholder.');
INSERT INTO change_defs VALUES(76,20,53,NULL,'Remove rowIndexChanged signal entry (no longer defined).');
INSERT INTO change_defs VALUES(77,20,53,NULL,'Remove registerLowerBlock entry (function removed).');
INSERT INTO change_defs VALUES(78,20,53,NULL,'Remove handleLowerBlockStateChange entry (function removed).');
INSERT INTO change_defs VALUES(79,20,53,NULL,'Remove _rowRepositionConnected entry (property removed).');
INSERT INTO change_defs VALUES(80,20,53,NULL,'Remove destroyMonitorConnected entry (property removed).');
INSERT INTO change_defs VALUES(81,21,51,359,'Add state list constant for BattleGrid state machine.');
INSERT INTO change_defs VALUES(82,21,51,360,'Expose currentState property.');
INSERT INTO change_defs VALUES(83,21,51,361,'Track previous state for observers.');
INSERT INTO change_defs VALUES(84,21,51,362,'Guard against concurrent state transitions.');
INSERT INTO change_defs VALUES(85,21,51,363,'Provide helper for checking current state equality.');
INSERT INTO change_defs VALUES(86,21,51,364,'Add queue storage collection for upcoming event sequencing.');
INSERT INTO change_defs VALUES(87,21,51,365,'Flag queueProcessing to reflect worker status.');
INSERT INTO change_defs VALUES(88,21,51,366,'Store reference to the active queue item.');
INSERT INTO change_defs VALUES(89,21,51,367,'Manage per-item promise lifecycle.');
INSERT INTO change_defs VALUES(90,21,51,368,'Emit stateChanging before transitions.');
INSERT INTO change_defs VALUES(91,21,51,369,'Emit stateChanged after transitions.');
INSERT INTO change_defs VALUES(92,21,51,370,'Signal rejected state change requests.');
INSERT INTO change_defs VALUES(93,21,51,371,'Notify observers when queue items start.');
INSERT INTO change_defs VALUES(94,21,51,372,'Notify observers when queue items complete.');
INSERT INTO change_defs VALUES(95,21,51,373,'Introduce helper to normalize requested states.');
INSERT INTO change_defs VALUES(96,21,51,374,'Add validator for state requests.');
INSERT INTO change_defs VALUES(97,21,51,375,'Expose public setState API.');
INSERT INTO change_defs VALUES(98,21,51,376,'Provide ensureState convenience wrapper.');
INSERT INTO change_defs VALUES(99,21,51,377,'Create promise instance per queue item.');
INSERT INTO change_defs VALUES(100,21,51,378,'Ensure old promises are cleaned up when idle.');
INSERT INTO change_defs VALUES(101,21,51,379,'Trigger next queue step once the promise resolves.');
INSERT INTO change_defs VALUES(102,21,51,380,'Expose helper for queue completion emissions.');
INSERT INTO change_defs VALUES(103,21,51,381,'Add enqueue API for queue items.');
INSERT INTO change_defs VALUES(104,21,51,382,'Implement queue processor that runs hooks and waits on promises.');
INSERT INTO change_defs VALUES(105,21,51,383,'Expose initializationPromise for pending powerup data.');
INSERT INTO change_defs VALUES(106,21,51,384,'Reset initialization promise before reuse.');
INSERT INTO change_defs VALUES(107,21,51,385,'Factory helper to create initialization promise instances.');
INSERT INTO change_defs VALUES(108,21,51,386,'Route currentState changes through centralized handler.');
INSERT INTO change_defs VALUES(109,21,51,387,'Queue the initialization sequence when entering init state.');
INSERT INTO change_defs VALUES(110,21,51,388,'Resolve initialization promise when powerup data is received.');
INSERT INTO change_defs VALUES(111,21,51,389,'Bootstrap queue with initial state event.');
INSERT INTO change_defs VALUES(112,21,51,390,'Detect promise-like returns from queue callbacks.');
INSERT INTO change_defs VALUES(113,21,51,391,'Queue event to mark the grid as initialized.');
INSERT INTO change_defs VALUES(114,22,72,398,'Reconfirm alias exposure from base component after refactor');
INSERT INTO change_defs VALUES(115,22,72,399,'Ensure state property alias aligns with reusable design');
INSERT INTO change_defs VALUES(116,22,72,400,'Keep transition signal semantics while decoupling logic');
INSERT INTO change_defs VALUES(117,22,72,401,'Refactor bindContext to operate without direct BattleGrid coupling');
INSERT INTO change_defs VALUES(118,22,72,402,'Adjust addState for generic state registry usage');
INSERT INTO change_defs VALUES(119,22,72,403,'Rework addStateTransition to accept async handlers and queue events');
INSERT INTO change_defs VALUES(120,22,72,404,'Update removal path for transitions under new structure');
INSERT INTO change_defs VALUES(121,22,72,405,'Review transition listing output to match reorganized data');
INSERT INTO change_defs VALUES(122,22,72,406,'Split evaluation loop so subclasses can trigger transitions cleanly');
INSERT INTO change_defs VALUES(123,22,51,359,'Update state list initialization to align with new battle grid state machine');
INSERT INTO change_defs VALUES(124,22,51,360,'Bind current state to shared GameStateMachine context');
INSERT INTO change_defs VALUES(125,22,51,361,'Track previous state from reusable state machine callbacks');
INSERT INTO change_defs VALUES(126,22,51,362,'Drive transition flag off event queue processing');
INSERT INTO change_defs VALUES(127,22,51,363,'Expose helper object for hooking state machine handler callbacks');
INSERT INTO change_defs VALUES(128,22,51,375,'Delegate state updates to BattleGridStateMachine');
INSERT INTO change_defs VALUES(129,22,51,376,'Leverage reusable state machine to verify target state');
INSERT INTO change_defs VALUES(130,22,51,381,'Ensure queue items trigger BattleGridStateMachine events');
INSERT INTO change_defs VALUES(131,22,51,382,'Process event queue using new state machine evaluation model');
INSERT INTO change_defs VALUES(132,22,51,386,'Respond to state changes coming from BattleGridStateMachine');
INSERT INTO change_defs VALUES(133,22,51,387,'Push initialization via new reusable state machine');
INSERT INTO change_defs VALUES(134,22,51,388,'Adapt powerup data loaded flow to queue state changes safely');
INSERT INTO change_defs VALUES(135,22,51,389,'Bootstrap initial state transitions using event queue events');
INSERT INTO change_defs VALUES(136,22,51,391,'Queue post-initialization state in conjunction with state machine');
INSERT INTO change_defs VALUES(137,22,73,413,'Add properties to coordinate BattleGrid binding and runtime flags');
INSERT INTO change_defs VALUES(138,22,73,420,'Implement attachGrid/resetRuntimeFlags helpers for battle grids');
INSERT INTO change_defs VALUES(139,22,73,421,'Define topology transitions and evaluation handlers for initialization flow');
INSERT INTO change_defs VALUES(140,22,73,427,'Forward transition signals into BattleGrid event queue');
INSERT INTO change_defs VALUES(141,22,73,417,'Provide Connections to BattleGrid transition lifecycle callbacks');
INSERT INTO change_defs VALUES(142,23,51,389,'Refactor init bootstrap queue to use new progressive state helper.');
INSERT INTO change_defs VALUES(143,23,51,387,'Rework initialization transition handler to integrate progressive lifecycle.');
INSERT INTO change_defs VALUES(144,23,51,391,'Adjust initialized state queue completion to align with shared helper.');
INSERT INTO change_defs VALUES(145,23,51,430,'Add helper to derive base/progressive/completed state forms from stateList.');
INSERT INTO change_defs VALUES(146,23,51,431,'Introduce generic enqueueStateTransition helper to orchestrate queued lifecycle transitions.');
INSERT INTO change_defs VALUES(147,23,51,432,'Provide hasBlocksInState utility for state machine queries.');
INSERT INTO change_defs VALUES(148,23,51,433,'Stub collectMatches routine returning structured match summaries.');
INSERT INTO change_defs VALUES(149,23,51,434,'Add launchMatchedBlocks placeholder invoked by launch state.');
INSERT INTO change_defs VALUES(150,23,51,435,'Add evaluateActiveTurn placeholder for check_turn logic.');
INSERT INTO change_defs VALUES(151,23,73,428,'Handle queue completion payloads to trigger chained state requests.');
INSERT INTO change_defs VALUES(152,23,73,427,'Route engine transitions through managed enqueueStateTransition helper.');
INSERT INTO change_defs VALUES(153,23,73,424,'Delegate bootstrap sequence to managed state action infrastructure.');
INSERT INTO change_defs VALUES(154,23,73,425,'Convert initialization transition to progressive lifecycle helper usage.');
INSERT INTO change_defs VALUES(155,23,73,426,'Rewrite initialized state queuing to rely on shared progressive helper.');
INSERT INTO change_defs VALUES(156,23,73,439,'Add enqueueManagedState helper wiring state machine to grid lifecycle.');
INSERT INTO change_defs VALUES(157,23,73,438,'Define default state action library bridging fill/match/launch/check_turn behavior.');
INSERT INTO change_defs VALUES(158,23,73,440,'Add handleCompletedState to evaluate post-transition routing.');
INSERT INTO change_defs VALUES(159,23,51,359,'Extend stateList to include check_turn progressive forms.');
INSERT INTO change_defs VALUES(160,23,73,436,'Introduce cloneSimple helper to copy metadata maps before merging overrides.');
INSERT INTO change_defs VALUES(161,23,73,437,'Add extendLifecycleOptions to merge default and override lifecycle handlers.');
INSERT INTO change_defs VALUES(162,24,51,443,'Update handleStateChange to automatically chain compact/fill/match/launch when states reach their past forms.');
INSERT INTO change_defs VALUES(163,24,51,442,'Expose previousState property so the dispatcher can inspect prior values if needed.');
INSERT INTO change_defs VALUES(164,24,51,444,'Detect horizontal/vertical runs to flag real matches instead of tagging every block.');
INSERT INTO change_defs VALUES(165,24,51,445,'Add launchMatchedBlocks stub that flips matched blocks into launch state.');
INSERT INTO change_defs VALUES(166,24,51,NULL,'Remove legacy event queue properties/signals now that state changes run synchronously.');
INSERT INTO change_defs VALUES(167,25,51,443,'Rewire handleStateChange to enqueue lifecycles when base states are requested.');
INSERT INTO change_defs VALUES(168,25,51,462,'Introduce suppressStateHandler flag to prevent recursive lifecycle triggering.');
INSERT INTO change_defs VALUES(169,25,51,463,'Register state triplets used to derive base/progressive/completed forms.');
INSERT INTO change_defs VALUES(170,25,51,464,'Restore battleQueue storage for serialized lifecycle execution.');
INSERT INTO change_defs VALUES(171,25,51,465,'Track queueProcessing flag while a lifecycle event is running.');
INSERT INTO change_defs VALUES(172,25,51,466,'Surface activeQueueItem reference for debugging and chaining decisions.');
INSERT INTO change_defs VALUES(173,25,51,467,'Add normalizeStateName helper for consistent lifecycle lookups.');
INSERT INTO change_defs VALUES(174,25,51,468,'Add stateFormsFor helper returning base/progressive/completed triplets.');
INSERT INTO change_defs VALUES(175,25,51,449,'Allow setGridStateInternal to optionally suppress state change callbacks while the queue adjusts forms.');
INSERT INTO change_defs VALUES(176,25,51,469,'Add requestState entry point that normalizes base states and hands off to the queue.');
INSERT INTO change_defs VALUES(177,25,51,470,'Queue lifecycle descriptors with start/main/end hooks for each base state.');
INSERT INTO change_defs VALUES(178,25,51,471,'Prevent duplicate lifecycle enqueues by checking active and pending items.');
INSERT INTO change_defs VALUES(179,25,51,472,'Restore enqueueBattleEvent helper for adding lifecycle work to the queue.');
INSERT INTO change_defs VALUES(180,25,51,473,'Reintroduce processNextQueueItem to run queued events sequentially and await promises.');
INSERT INTO change_defs VALUES(181,25,51,474,'Add isPromiseLike helper used by the lifecycle queue to await asynchronous work.');
INSERT INTO change_defs VALUES(182,25,51,475,'Route lifecycle completions to the next base state based on results (matches, launches, etc.).');
INSERT INTO change_defs VALUES(183,25,51,476,'Add findWrapperPosition helper so moveWrapper no longer relies on undefined gridRow property.');
INSERT INTO change_defs VALUES(184,26,74,NULL,'Expand wheel.sh to provide query, search, insert, update, delete, and planning helpers for WHEEL.db.');
INSERT INTO change_defs VALUES(185,26,74,477,'Document the expanded CLI usage entry point.');
INSERT INTO change_defs VALUES(186,26,74,478,'Track fatal error helper for the wheel.sh workflow.');
INSERT INTO change_defs VALUES(187,26,74,479,'Record verbose-safe debug logging helper.');
INSERT INTO change_defs VALUES(188,26,74,480,'Ensure the database existence check is catalogued.');
INSERT INTO change_defs VALUES(189,26,74,481,'Capture SQL literal quoting helper for inserts/updates.');
INSERT INTO change_defs VALUES(190,26,74,482,'Describe wildcard-wrapping logic for LIKE filters.');
INSERT INTO change_defs VALUES(191,26,74,483,'Note identifier sanitisation for generated SQL.');
INSERT INTO change_defs VALUES(192,26,74,484,'Track dotted column reference validation helper.');
INSERT INTO change_defs VALUES(193,26,74,485,'Document runtime detection of sqlite3 parameter support.');
INSERT INTO change_defs VALUES(194,26,74,486,'Register join helper used by SQL fragments.');
INSERT INTO change_defs VALUES(195,26,74,487,'Capture construction of multi-column search clauses.');
INSERT INTO change_defs VALUES(196,26,74,488,'Add main query command orchestrator to change log.');
INSERT INTO change_defs VALUES(197,26,74,489,'Add fuzzy search wrapper command description.');
INSERT INTO change_defs VALUES(198,26,74,490,'Track assignment parser feeding inserts and updates.');
INSERT INTO change_defs VALUES(199,26,74,491,'Record new insert subcommand for WHEEL.db rows.');
INSERT INTO change_defs VALUES(200,26,74,492,'Record update subcommand with --set handling.');
INSERT INTO change_defs VALUES(201,26,74,493,'Record delete subcommand for table pruning.');
INSERT INTO change_defs VALUES(202,26,74,494,'Record describe subcommand for schema and row preview.');
INSERT INTO change_defs VALUES(203,26,74,495,'Document change planning summary subcommand.');
INSERT INTO change_defs VALUES(204,26,74,496,'Document raw SQL runner interface.');
INSERT INTO change_defs VALUES(205,26,74,497,'Track main dispatcher for wheel.sh.');
CREATE TABLE todo (
  id INTEGER PRIMARY KEY,
  change_id INTEGER NOT NULL,
  change_defs_id INTEGER,
  change_files_id INTEGER,
  description TEXT NOT NULL,
  FOREIGN KEY(change_id) REFERENCES changes(id),
  FOREIGN KEY(change_defs_id) REFERENCES change_defs(id),
  FOREIGN KEY(change_files_id) REFERENCES change_files(id)
);
INSERT INTO todo VALUES(1,22,114,47,'Refactor alias wiring for engine/GameStateMachine.qml');
INSERT INTO todo VALUES(2,22,115,47,'Sync state property alias for generic machine');
INSERT INTO todo VALUES(3,22,116,47,'Ensure transition signal remains generic');
INSERT INTO todo VALUES(4,22,117,47,'Rewrite bindContext for reusable component');
INSERT INTO todo VALUES(5,22,118,47,'Update addState implementation for reusable registry');
INSERT INTO todo VALUES(6,22,119,47,'Allow async/queued transitions in addStateTransition');
INSERT INTO todo VALUES(7,22,120,47,'Confirm removeStateTransition handles new registry state');
INSERT INTO todo VALUES(8,22,121,47,'Adjust listStateTransitions output formatting');
INSERT INTO todo VALUES(9,22,122,47,'Rework checkTransitions to coordinate queued evaluation');
INSERT INTO todo VALUES(10,22,123,48,'Reshape BattleGrid stateList for new machine');
INSERT INTO todo VALUES(11,22,124,48,'Bind BattleGrid currentState to machine context');
INSERT INTO todo VALUES(12,22,125,48,'Update previousState tracking using machine callbacks');
INSERT INTO todo VALUES(13,22,126,48,'Drive transition flag from event queue state');
INSERT INTO todo VALUES(14,22,127,48,'Rebuild stateHelper to expose machine/handlers');
INSERT INTO todo VALUES(15,22,128,48,'Delegate setState through BattleGridStateMachine');
INSERT INTO todo VALUES(16,22,129,48,'Rewrite ensureState to consult machine transitions');
INSERT INTO todo VALUES(17,22,130,48,'Emit queue events for state machine transitions');
INSERT INTO todo VALUES(18,22,131,48,'Process queue items via machine-driven evaluation');
INSERT INTO todo VALUES(19,22,132,48,'Handle state changes from BattleGridStateMachine');
INSERT INTO todo VALUES(20,22,133,48,'Enqueue initialization transitions via handler hook');
INSERT INTO todo VALUES(21,22,134,48,'Resolve powerup data with queued events');
INSERT INTO todo VALUES(22,22,135,48,'Bootstrap initial state events using machine');
INSERT INTO todo VALUES(23,22,136,48,'Queue initialized state to avoid async issues');
INSERT INTO todo VALUES(24,22,137,49,'Add BattleGrid-specific state machine properties');
INSERT INTO todo VALUES(25,22,138,49,'Implement attach/reset helper functions');
INSERT INTO todo VALUES(26,22,139,49,'Create topology and evaluation handlers');
INSERT INTO todo VALUES(27,22,140,49,'Forward machine transitions into event queue');
INSERT INTO todo VALUES(28,22,141,49,'Connect BattleGrid lifecycle signals to machine');
INSERT INTO todo VALUES(29,23,142,50,'Refactor BattleGrid init bootstrap to progressive helper.');
INSERT INTO todo VALUES(30,23,143,50,'Update initialization transition to use new queue lifecycle.');
INSERT INTO todo VALUES(31,23,144,50,'Align initialized state queue completion with helper payload.');
INSERT INTO todo VALUES(32,23,145,50,'Implement state triplet resolver on BattleGrid.');
INSERT INTO todo VALUES(33,23,146,50,'Add enqueueStateTransition helper bridging queue lifecycle.');
INSERT INTO todo VALUES(34,23,147,50,'Expose hasBlocksInState utility for block state lookups.');
INSERT INTO todo VALUES(35,23,148,50,'Stub collectMatches implementation returning structured result.');
INSERT INTO todo VALUES(36,23,149,50,'Add launchMatchedBlocks placeholder invoked by launch state.');
INSERT INTO todo VALUES(37,23,150,50,'Create evaluateActiveTurn stub for check_turn evaluation.');
INSERT INTO todo VALUES(38,23,151,51,'Handle queue completion payload to drive chained state requests.');
INSERT INTO todo VALUES(39,23,152,51,'Ensure transition handler routes through managed state enqueuing.');
INSERT INTO todo VALUES(40,23,153,51,'Refactor bootstrap helper to invoke enqueueManagedState.');
INSERT INTO todo VALUES(41,23,154,51,'Adapt initialization transition helper to shared lifecycle.');
INSERT INTO todo VALUES(42,23,155,51,'Update initialized state queue wrapper for progressive helper usage.');
INSERT INTO todo VALUES(43,23,156,51,'Implement enqueueManagedState helper bridging machine and grid.');
INSERT INTO todo VALUES(44,23,157,51,'Define default state action library for fill/match/launch/check_turn.');
INSERT INTO todo VALUES(45,23,158,51,'Add handleCompletedState to analyze finished lifecycles and queue next state.');
INSERT INTO todo VALUES(46,23,159,50,'Extend BattleGrid stateList with check_turn entries.');
INSERT INTO todo VALUES(47,23,160,51,'Add cloneSimple helper for lifecycle metadata copies.');
INSERT INTO todo VALUES(48,23,161,51,'Implement extendLifecycleOptions merger for state lifecycles.');
INSERT INTO todo VALUES(49,24,162,51,'Implement handleStateChange dispatcher for compact/fill/match/launch.');
INSERT INTO todo VALUES(50,24,163,52,'Expose previousState property for state tracking.');
INSERT INTO todo VALUES(51,24,164,52,'Stub markMatchedBlocks to flag entries during match state.');
INSERT INTO todo VALUES(52,24,165,52,'Implement launchMatchedBlocks to advance matched blocks to launch.');
INSERT INTO todo VALUES(53,24,166,52,'Remove legacy eventQueue-based helpers from BattleGrid.');
INSERT INTO todo VALUES(54,25,167,53,'Hook handleStateChange into lifecycle queue for base state requests.');
INSERT INTO todo VALUES(55,25,168,53,'Add suppressStateHandler guard to avoid recursive state handling.');
INSERT INTO todo VALUES(56,25,169,53,'Define stateList triplets for lifecycle management.');
INSERT INTO todo VALUES(57,25,170,53,'Restore battleQueue storage for queued events.');
INSERT INTO todo VALUES(58,25,171,53,'Track queueProcessing status while lifecycle runs.');
INSERT INTO todo VALUES(59,25,172,53,'Expose activeQueueItem for lifecycle debugging.');
INSERT INTO todo VALUES(60,25,173,53,'Implement normalizeStateName helper for lifecycle lookups.');
INSERT INTO todo VALUES(61,25,174,53,'Implement stateFormsFor helper returning base/progressive/completed trio.');
INSERT INTO todo VALUES(62,25,175,53,'Update setGridStateInternal to optionally suppress handler recursion.');
INSERT INTO todo VALUES(63,25,176,53,'Add requestState helper to trigger lifecycle queue.');
INSERT INTO todo VALUES(64,25,177,53,'Create enqueueLifecycleForState that builds lifecycle descriptors.');
INSERT INTO todo VALUES(65,25,178,53,'Guard against duplicate lifecycle enqueues via isLifecycleQueued.');
INSERT INTO todo VALUES(66,25,179,53,'Restore enqueueBattleEvent helper for queueing lifecycle work.');
INSERT INTO todo VALUES(67,25,180,53,'Run lifecycle queue sequentially via processNextQueueItem.');
INSERT INTO todo VALUES(68,25,181,53,'Use isPromiseLike to await async lifecycle main results.');
INSERT INTO todo VALUES(69,25,182,53,'Chain lifecycle completions to subsequent base states based on outcome.');
INSERT INTO todo VALUES(70,25,183,53,'Implement findWrapperPosition to support moveWrapper without custom wrapper properties.');
INSERT INTO todo VALUES(71,26,184,54,'Implement enhanced wheel.sh CLI with CRUD tooling and flexible queries.');
COMMIT;
